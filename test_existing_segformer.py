#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–æ–π segformer.tflite –º–æ–¥–µ–ª–∏
"""

import tensorflow as tf
import numpy as np
import os

def test_existing_segformer():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤—É—é segformer.tflite –º–æ–¥–µ–ª—å
    """
    model_path = "assets/ml/segformer.tflite"
    
    if not os.path.exists(model_path):
        print("‚ùå –§–∞–π–ª segformer.tflite –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—É—é segformer.tflite –º–æ–¥–µ–ª—å...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
        interpreter = tf.lite.Interpreter(model_path=model_path)
        interpreter.allocate_tensors()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞
        input_details = interpreter.get_input_details()
        output_details = interpreter.get_output_details()
        
        print(f"\n‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –í—Ö–æ–¥–Ω—ã—Ö —Ç–µ–Ω–∑–æ—Ä–æ–≤: {len(input_details)}")
        print(f"üìä –í—ã—Ö–æ–¥–Ω—ã—Ö —Ç–µ–Ω–∑–æ—Ä–æ–≤: {len(output_details)}")
        
        print(f"\nüì• –í—Ö–æ–¥–Ω—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã:")
        for i, detail in enumerate(input_details):
            print(f"  {i}: –∏–º—è='{detail['name']}', —Ñ–æ—Ä–º–∞={detail['shape']}, —Ç–∏–ø={detail['dtype']}")
            
        print(f"\nüì§ –í—ã—Ö–æ–¥–Ω—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã:")
        for i, detail in enumerate(output_details):
            print(f"  {i}: –∏–º—è='{detail['name']}', —Ñ–æ—Ä–º–∞={detail['shape']}, —Ç–∏–ø={detail['dtype']}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å
        input_shape = input_details[0]['shape']
        input_dtype = input_details[0]['dtype']
        
        print(f"\nüß™ –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å:")
        print(f"  –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {input_shape}...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        test_input = np.random.random(input_shape).astype(input_dtype)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [0, 1] –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if input_dtype == np.float32:
            test_input = (test_input * 255.0).astype(np.uint8).astype(np.float32) / 255.0
        
        interpreter.set_tensor(input_details[0]['index'], test_input)
        interpreter.invoke()
        
        output = interpreter.get_tensor(output_details[0]['index'])
        
        print(f"  ‚úÖ –ò–Ω—Ñ–µ—Ä–µ–Ω—Å —É—Å–ø–µ—à–µ–Ω!")
        print(f"  üìè –§–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–∞: {output.shape}")
        print(f"  üìä –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: [{output.min():.4f}, {output.max():.4f}]")
        print(f"  üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–∫–ª–∞—Å—Å—ã): {np.unique(output.argmax(axis=-1))}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤
        if len(output.shape) == 4:  # [batch, height, width, classes]
            num_classes = output.shape[-1]
        elif len(output.shape) == 3:  # [batch, height, width] - —É–∂–µ argmax
            num_classes = len(np.unique(output))
        else:
            num_classes = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        print(f"  üè∑Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤: {num_classes}")
        
        # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(model_path) / 1024  # KB
        print(f"  üì¶ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.1f} KB")
        
        model_info = {
            "path": model_path,
            "input_shape": input_shape.tolist(),
            "output_shape": output.shape,
            "num_classes": num_classes,
            "file_size_kb": file_size,
            "dtype": str(input_dtype)
        }
        
        return True, model_info
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False, None

def compare_models():
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
    """
    print("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:")
    
    models = [
        ("segformer.tflite", "assets/ml/segformer.tflite"),
        ("deeplabv3_mnv2_ade20k_1.tflite", "assets/ml/deeplabv3_mnv2_ade20k_1.tflite"),
        ("segformer-model-new.onnx", "assets/ml/segformer-model-new.onnx")
    ]
    
    print(f"\n{'–ú–æ–¥–µ–ª—å':<30} {'–†–∞–∑–º–µ—Ä':<10} {'–§–æ—Ä–º–∞—Ç':<8} {'–°—Ç–∞—Ç—É—Å':<10}")
    print("-" * 60)
    
    available_models = []
    
    for name, path in models:
        if os.path.exists(path):
            size = os.path.getsize(path) / (1024 * 1024)  # MB
            format_type = path.split('.')[-1].upper()
            status = "‚úÖ –ï—Å—Ç—å"
            available_models.append((name, path, size, format_type))
        else:
            size = 0
            format_type = "N/A"
            status = "‚ùå –ù–µ—Ç"
        
        print(f"{name:<30} {size:>7.1f}MB {format_type:<8} {status:<10}")
    
    return available_models

def recommend_best_model():
    """
    –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏:")
    
    print("\n1. üèÜ segformer.tflite (197KB) - –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø")
    print("   ‚úÖ –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä")
    print("   ‚úÖ –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ TensorFlow Lite")
    print("   ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å")
    print("   ‚ö†Ô∏è  –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
    
    print("\n2. ü•à deeplabv3_mnv2_ade20k_1.tflite (5.2KB)")
    print("   ‚úÖ –£–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å 'wall' = 2")
    print("   ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º —Å —Ç–µ–∫—É—â–∏–º –∫–æ–¥–æ–º")
    print("   ‚ö†Ô∏è  –ú–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–º —á–µ–º SegFormer")
    
    print("\n3. ü•â segformer-model-new.onnx (14MB)")
    print("   ‚úÖ –ù–∞–∏–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (Mean IoU: 0.8993)")
    print("   ‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–±—É—á–µ–Ω –¥–ª—è —Å—Ç–µ–Ω")
    print("   ‚ùå –ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä")
    print("   ‚ùå –¢—Ä–µ–±—É–µ—Ç ONNX Runtime")
    print("   ‚ùå –°–ª–æ–∂–Ω–µ–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–æ Flutter")
    
    print("\nüéØ –í–´–í–û–î: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å segformer.tflite")
    print("   –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–µ —É—Å—Ç—Ä–æ–∏—Ç - –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ deeplabv3_mnv2_ade20k_1.tflite")

if __name__ == "__main__":
    print("=" * 60)
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
    print("=" * 60)
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
    available_models = compare_models()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º segformer.tflite –µ—Å–ª–∏ –µ—Å—Ç—å
    success, model_info = test_existing_segformer()
    
    if success:
        print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ segformer.tflite:")
        for key, value in model_info.items():
            print(f"  {key}: {value}")
    
    # –í—ã–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommend_best_model()
    
    print(f"\n" + "=" * 60)
    print(f"üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    print("=" * 60) 