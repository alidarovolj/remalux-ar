import 'dart:async';
import 'dart:io';
import 'dart:typed_data';
import 'dart:ui' as ui;
import 'package:camera/camera.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../core/services/cv_wall_painter_service.dart';
import '../core/services/segmentation_service.dart';
import '../core/services/wall_segmentation_service.dart';
import '../core/widgets/performance_overlay.dart';
import '../core/widgets/memory_stats_overlay.dart';
import '../core/widgets/device_info_overlay.dart';
import '../core/widgets/segmentation_mode_overlay.dart';
import 'dart:math' as math;

/// Computer Vision Wall Painter Screen
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ML —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é —Å ADE20K –¥–∞—Ç–∞—Å–µ—Ç–æ–º –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏ —Å—Ç–µ–Ω
class CVWallPainterScreen extends StatefulWidget {
  const CVWallPainterScreen({Key? key}) : super(key: key);

  @override
  State<CVWallPainterScreen> createState() => _CVWallPainterScreenState();
}

class _CVWallPainterScreenState extends State<CVWallPainterScreen>
    with
        WidgetsBindingObserver,
        PerformanceOverlayMixin,
        MemoryStatsOverlayMixin,
        DeviceInfoOverlayMixin,
        SegmentationModeOverlayMixin {
  // Camera
  CameraController? _cameraController;
  bool _isCameraInitialized = false;
  List<CameraDescription> _cameras = [];
  CameraImage? _lastCameraImage;

  // Key for camera preview widget
  final GlobalKey _cameraPreviewKey = GlobalKey();

  // CV Service
  final CVWallPainterService _cvService = CVWallPainterService.instance;
  bool _isCVInitialized = false;
  bool _isServiceBusy = false;
  CVResultDto? _lastCvResult; // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ü–µ–ª–∏–∫–æ–º

  // –û–¢–ö–õ–Æ–ß–ê–ï–ú –º–µ–¥–ª–µ–Ω–Ω—ã–π CV –∏–∑–æ–ª—è—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é
  bool _enableCVProcessing = false; // –í–´–ö–õ–Æ–ß–ï–ù–û –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏

  // Segmentation Services
  final SegmentationService _segmentationService = SegmentationService();
  final WallSegmentationService _wallSegmentationService =
      WallSegmentationService();
  bool _isSegmentationInitialized = false;
  bool _isWallSegmentationInitialized = false;
  Uint8List? _currentWallMask; // –ú–∞—Å–∫–∞ —Å—Ç–µ–Ω—ã –æ—Ç –º–æ–¥–µ–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏

  // –ú–æ–¥–µ–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
  int _currentModelIndex =
      2; // 0 - standard, 1 - specialized, 2 - mobile optimized
  final List<String> _modelNames = [
    '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è (ADE20K)',
    '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è',
    '–ú–æ–±–∏–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'
  ];
  final List<Color> _modelColors = [Colors.orange, Colors.blue, Colors.green];

  // Current painting state
  ui.Image? _segmentationOverlay;
  ui.Image?
      _combinedPaintedOverlay; // –ï–¥–∏–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–∫—Ä–∞—à–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
  ui.Offset? _lastTapPoint;
  Color _selectedColor = const Color(0xFF2196F3);

  // Performance metrics
  int _lastProcessingTimeMs = 0;
  int _frameCount = 0;
  int _segmentationFrameCount = 0; // –°—á—ë—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
  static const int _targetFPS = 30; // –¶–µ–ª–µ–≤–æ–π FPS
  int _segmentationEveryNFrames =
      2; // –£–°–ö–û–†–ï–ù–û: –∫–∞–∂–¥—ã–µ 2 –∫–∞–¥—Ä–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞
  DateTime _lastSegmentationTime = DateTime.now();
  static const Duration _minSegmentationInterval =
      Duration(milliseconds: 66); // –£–°–ö–û–†–ï–ù–û: 15 FPS –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏

  // –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  bool _useFastMode = true; // –í–ö–õ–Æ–ß–ï–ù –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  static const Duration _fastModeInterval =
      Duration(milliseconds: 33); // 30 FPS –≤ —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–µ

  // UI State
  bool _showColorPalette = false;
  bool _showInstructions = true;
  bool _showDebugInfo = false;
  bool _showSegmentation = true; // –í–∫–ª—é—á–µ–Ω–æ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
  bool _showPaintLoader = false;

  // Color palette
  static const List<Color> _colorPalette = [
    Color(0xFF2196F3), // Blue
    Color(0xFF4CAF50), // Green
    Color(0xFFFF9800), // Orange
    Color(0xFF9C27B0), // Purple
    Color(0xFFF44336), // Red
    Color(0xFFFFEB3B), // Yellow
    Color(0xFF795548), // Brown
    Color(0xFF607D8B), // Blue Grey
    Color(0xFF00BCD4), // Cyan
    Color(0xFF8BC34A), // Light Green
    Color(0xFFE91E63), // Pink
    Color(0xFF3F51B5), // Indigo
  ];

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    _initializeServices();
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
    if (_cameraController != null) {
      try {
        _cameraController!.stopImageStream();
        _cameraController!.dispose();
        debugPrint('üì∑ Camera controller disposed safely');
      } catch (e) {
        debugPrint('‚ö†Ô∏è Error disposing camera controller: $e');
      }
    }

    _cvService.dispose();

    // Dispose segmentation services
    if (_isWallSegmentationInitialized) {
      _wallSegmentationService.dispose();
    }
    // SegmentationService –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ dispose(), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    if (_cameraController == null || !_cameraController!.value.isInitialized) {
      return;
    }

    if (state == AppLifecycleState.paused) {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∏–º, –Ω–æ –ù–ï –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
      _cameraController?.stopImageStream();
      debugPrint('üì∑ Camera stream stopped (app paused)');
    } else if (state == AppLifecycleState.resumed) {
      // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–º –µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –µ—â–µ –∂–∏–≤–æ–π
      if (_cameraController != null && _cameraController!.value.isInitialized) {
        _cameraController!.startImageStream((CameraImage image) {
          if (!mounted) return;
          _lastCameraImage = image;

          // Process CV for paint detection
          if (_isCVInitialized && !_isServiceBusy) {
            final didStart = _cvService.processCameraFrame(image);
            if (didStart) {
              _isServiceBusy = true;
            }
          }
        });
        debugPrint('üì∑ Camera stream resumed');
      } else {
        // –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –±—ã–ª –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω, —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        _initializeCamera();
      }
    }
  }

  Future<void> _initializeServices() async {
    try {
      // Initialize CV service
      await _cvService.initialize();

      // Initialize Segmentation services - –ë–ê–õ–ê–ù–° –°–ö–û–†–û–°–¢–ò –ò –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        _currentModelIndex = 0; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å ADE20K
        await _segmentationService.loadModel();
        _isSegmentationInitialized = true;
        debugPrint('‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      } catch (e) {
        debugPrint('‚ö†Ô∏è Failed to load standard model: $e');
        // Fallback –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ—Ç –∂–µ
        _currentModelIndex = 0;
        await _segmentationService.loadModel();
        _isSegmentationInitialized = true;
        debugPrint('‚úÖ Fallback segmentation service initialized');
      }

      // Set up callbacks for CV service
      _cvService.setResultCallback((result) {
        if (!mounted) {
          _isServiceBusy = false;
          return;
        }

        _prepareImagesFromCvResult(result).then((images) async {
          final (segmentationOverlay, paintedOverlay) = images;

          if (mounted) {
            // Merge the new painted overlay onto the combined one
            if (paintedOverlay != null) {
              final newCombinedOverlay = await _mergeOverlays(
                baseImage: _combinedPaintedOverlay,
                newOverlay: paintedOverlay,
              );
              setState(() {
                _combinedPaintedOverlay = newCombinedOverlay;
              });
            }

            setState(() {
              if (segmentationOverlay != null) {
                _segmentationOverlay = segmentationOverlay;
              }
              // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π segmentationOverlay –µ—Å–ª–∏ –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π
              _showPaintLoader = false;
              _lastCvResult = result;
              _lastProcessingTimeMs = result.processingTimeMs;
            });
            debugPrint(
                '‚úÖ CV —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –∏ UI –æ–±–Ω–æ–≤–ª–µ–Ω: ${result.processingTimeMs}ms');
          }
        }).whenComplete(() {
          _isServiceBusy = false;
        });
      });

      _cvService.setErrorCallback((error) {
        if (mounted) {
          setState(() {
            _showPaintLoader = false;
          });
          debugPrint('‚ùå CV –æ—à–∏–±–∫–∞: $error');
        }
        _isServiceBusy = false;
      });

      if (mounted) {
        setState(() {
          _isCVInitialized = _cvService.isInitialized;
        });
      }

      // Initialize camera
      await _initializeCamera();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: $e');
      if (mounted) {
        _showErrorDialog('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏',
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É –∏–ª–∏ ML —Å–µ—Ä–≤–∏—Å: $e');
      }
    }
  }

  Future<(ui.Image?, ui.Image?)> _prepareImagesFromCvResult(
      CVResultDto result) async {
    ui.Image? segmentationOverlay;
    ui.Image? paintedOverlay;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ segmentation –º–∞—Å–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º overlay
    bool shouldCreateSegmentationOverlay = false;
    if (result.segmentationMask != null) {
      final wallPixelCount =
          result.segmentationMask!.where((p) => p == 1).length;
      final wallPercentage = wallPixelCount / result.segmentationMask!.length;
      shouldCreateSegmentationOverlay =
          wallPercentage > 0.05 && wallPercentage < 0.95;

      if (!shouldCreateSegmentationOverlay) {
        debugPrint(
            '‚ö†Ô∏è Skipping segmentation overlay: ${(wallPercentage * 100).toStringAsFixed(1)}% walls');
      }
    }

    // Use Future.wait to create images in parallel for better performance
    await Future.wait([
      if (shouldCreateSegmentationOverlay && result.segmentationMask != null)
        _createImageFromMask(result.segmentationMask!, result.maskWidth,
                result.maskHeight, const Color.fromARGB(128, 33, 150, 243))
            .then((img) => segmentationOverlay = img),
      if (result.paintedMask != null)
        _createImageFromMask(result.paintedMask!, result.maskWidth,
                result.maskHeight, _selectedColor.withOpacity(0.7))
            .then((img) => paintedOverlay = img),
    ]);

    return (segmentationOverlay, paintedOverlay);
  }

  Future<void> _initializeCamera() async {
    try {
      debugPrint('üì∑ Initializing camera...');
      _cameras = await availableCameras();
      if (_cameras.isEmpty) {
        debugPrint('‚ùå No cameras found on this device.');
        if (mounted) {
          _showErrorDialog(
              '–ù–µ—Ç –∫–∞–º–µ—Ä—ã', '–ù–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä.');
        }
        return;
      }
      debugPrint('üì∑ Found ${_cameras.length} cameras');

      final camera = _cameras.firstWhere(
          (cam) => cam.lensDirection == CameraLensDirection.back,
          orElse: () => _cameras.first);

      // Dispose existing controller before creating a new one
      if (_cameraController != null) {
        await _cameraController!.dispose();
      }

      final imageFormatGroup =
          Platform.isIOS ? ImageFormatGroup.bgra8888 : ImageFormatGroup.yuv420;

      _cameraController = CameraController(
        camera,
        ResolutionPreset
            .medium, // –û–ë–ù–û–í–õ–ï–ù–û —Å low –Ω–∞ medium –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        enableAudio: false,
        imageFormatGroup: imageFormatGroup,
      );

      await _cameraController!.initialize();
      debugPrint('üì∑ Camera controller initialized');
      if (!mounted) return;

      // Ensure the widget is still mounted before starting the stream
      if (!mounted) return;
      debugPrint('üì∑ Starting image stream...');
      await _cameraController!.startImageStream((CameraImage image) {
        if (!mounted) return;
        _lastCameraImage = image;
        _frameCount++;

        // –û–¢–ö–õ–Æ–ß–ê–ï–ú –º–µ–¥–ª–µ–Ω–Ω—ã–π CV –∏–∑–æ–ª—è—Ç
        if (_enableCVProcessing && _isCVInitialized && !_isServiceBusy) {
          _processFrameAsync(image);
        }

        // –¢–û–õ–¨–ö–û –±—ã—Å—Ç—Ä–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è - –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –º–∞—Å–æ–∫
        _segmentationFrameCount++;
        final now = DateTime.now();
        final targetInterval =
            _useFastMode ? _fastModeInterval : _minSegmentationInterval;

        if (_isSegmentationInitialized &&
            _segmentationFrameCount % _segmentationEveryNFrames == 0 &&
            now.difference(_lastSegmentationTime) >= targetInterval) {
          // –ë—ã—Å—Ç—Ä–æ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
          Future.microtask(() => _updateWallMaskFast(image));
          _lastSegmentationTime = now;
        }
      });

      if (mounted) {
        setState(() {
          _isCameraInitialized = true;
        });
        debugPrint('‚úÖ Camera initialization completed');
        debugPrint(
            'üìä Camera status: ${_cameraController!.value.isInitialized}');
        debugPrint(
            'üìä Camera aspect ratio: ${_cameraController!.value.aspectRatio}');
        debugPrint('üîÑ Triggering rebuild after camera init...');

        // Force rebuild to update UI
        setState(() {});
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–º–µ—Ä—ã: $e');
      if (mounted) {
        _showErrorDialog(
            '–û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã', '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–º–µ—Ä—É: $e');
      }
    }
  }

  /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–π —Ä–∞–±–æ—Ç—ã
  void _processFrameAsync(CameraImage image) {
    final didStart = _cvService.processCameraFrame(image);
    if (didStart) {
      _isServiceBusy = true;
    }
  }

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
  bool _isSegmentationProcessing = false;

  /// –ë–´–°–¢–†–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Å–∫–∏ —Å—Ç–µ–Ω—ã (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)
  void _updateWallMaskFast(CameraImage image) async {
    if (_isSegmentationProcessing) return;

    _isSegmentationProcessing = true;
    final stopwatch = Stopwatch()..start();

    try {
      Uint8List? mask;

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å
      if (_isSegmentationInitialized) {
        mask = _segmentationService.processCameraImage(image);
      }

      stopwatch.stop();
      final processingTime = stopwatch.elapsedMilliseconds;

      if (mask != null && mounted) {
        final wallPixelCount = mask.where((p) => p == 1).length;
        final wallPercentage = wallPixelCount / mask.length;

        // –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (wallPercentage > 0.005 && wallPercentage < 0.995) {
          if (mounted) {
            setState(() {
              _currentWallMask = mask;
              _lastProcessingTimeMs =
                  processingTime; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            });

            // –°–æ–∑–¥–∞–µ–º overlay –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            _createSegmentationOverlay(mask, wallPercentage);
          }
          debugPrint(
              '‚ö° FAST segmentation: ${wallPixelCount}/${mask.length} pixels (${(wallPercentage * 100).toStringAsFixed(1)}%) in ${processingTime}ms');
        }
      }
    } catch (e) {
      debugPrint('‚ùå Fast segmentation error: $e');
    } finally {
      _isSegmentationProcessing = false;
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç overlay –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
  void _createSegmentationOverlay(Uint8List mask, double wallPercentage) async {
    try {
      final overlay = await _createImageFromMask(
          mask,
          _segmentationService.maskWidth ?? 65,
          _segmentationService.maskHeight ?? 65,
          const Color.fromARGB(128, 33, 150, 243));

      if (mounted) {
        setState(() {
          _segmentationOverlay = overlay;
        });
      }
    } catch (e) {
      debugPrint('‚ùå Error creating overlay: $e');
    }
  }

  Future<void> _onTapScreen(TapDownDetails details) async {
    if (!_isCVInitialized ||
        _isServiceBusy ||
        _cameraController == null ||
        _lastCameraImage == null) {
      return;
    }

    HapticFeedback.lightImpact();

    // Get the size of the CameraPreview widget
    final RenderBox? previewBox =
        _cameraPreviewKey.currentContext?.findRenderObject() as RenderBox?;
    if (previewBox == null || !previewBox.hasSize) return;
    final previewSize = previewBox.size;

    final didStart = _cvService.paintWall(
      _lastCameraImage!,
      details.localPosition,
      previewSize,
      _selectedColor,
      wallMask: null, // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –Ω–æ–≤—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é
      maskWidth: null,
      maskHeight: null,
    );

    if (didStart) {
      _isServiceBusy = true;
      setState(() {
        _showPaintLoader = true;
        _lastTapPoint = details.localPosition;
      });
    }
  }

  void _onColorSelected(Color color) {
    HapticFeedback.selectionClick();
    setState(() {
      _selectedColor = color;
      _showColorPalette = false;
    });
  }

  void _clearPainting() {
    HapticFeedback.mediumImpact();
    setState(() {
      _combinedPaintedOverlay = null; // –û—á–∏—â–∞–µ–º –µ–¥–∏–Ω—ã–π —Ö–æ–ª—Å—Ç
      _segmentationOverlay = null; // Also clear segmentation
      _lastTapPoint = null;
      _frameCount = 0;
    });
  }

  Future<ui.Image> _mergeOverlays(
      {ui.Image? baseImage, required ui.Image newOverlay}) async {
    final recorder = ui.PictureRecorder();
    final canvas = Canvas(recorder);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –Ω–æ–≤–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    final targetWidth = newOverlay.width;
    final targetHeight = newOverlay.height;

    // If there's a base image, draw it first scaled to target size
    if (baseImage != null) {
      final srcRect = Rect.fromLTWH(
          0, 0, baseImage.width.toDouble(), baseImage.height.toDouble());
      final dstRect =
          Rect.fromLTWH(0, 0, targetWidth.toDouble(), targetHeight.toDouble());
      canvas.drawImageRect(baseImage, srcRect, dstRect, Paint());
    }

    // Draw the new overlay on top.
    canvas.drawImage(newOverlay, Offset.zero, Paint());

    // End recording and return the new combined image.
    final picture = recorder.endRecording();
    return await picture.toImage(targetWidth, targetHeight);
  }

  Future<ui.Image> _createImageFromMask(
      Uint8List mask, int width, int height, Color color) async {
    final pixels = Uint32List(mask.length);
    for (int i = 0; i < mask.length; i++) {
      if (mask[i] == 1) {
        pixels[i] = color.value;
      } else {
        // –î–µ–ª–∞–µ–º –ø–∏–∫—Å–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º –≤–º–µ—Å—Ç–æ —á–µ—Ä–Ω–æ–≥–æ
        pixels[i] = 0x00000000; // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —á–µ—Ä–Ω—ã–π (ARGB)
      }
    }

    final completer = Completer<ui.Image>();
    ui.decodeImageFromPixels(
      pixels.buffer.asUint8List(),
      width,
      height,
      ui.PixelFormat.rgba8888,
      completer.complete,
    );
    return completer.future;
  }

  void _showErrorDialog(String title, String message) {
    if (!mounted) return;
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(title),
        content: Text(message),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        title: const Text('CV Wall Painter'),
        backgroundColor: Colors.black,
        foregroundColor: Colors.white,
        actions: [
          IconButton(
            icon: Icon(_showDebugInfo ? Icons.info : Icons.info_outline),
            onPressed: () {
              setState(() {
                _showDebugInfo = !_showDebugInfo;
              });
            },
          ),
        ],
      ),
      body: Stack(
        children: [
          // Camera preview with segmentation
          if (_cameraController != null &&
              _cameraController!.value.isInitialized)
            Positioned.fill(
              child: AspectRatio(
                aspectRatio: _cameraController!.value.aspectRatio,
                child: Stack(
                  children: [
                    // Camera preview
                    CameraPreview(_cameraController!),

                    // Segmentation overlay
                    if (_showSegmentation && _segmentationOverlay != null)
                      Positioned.fill(
                        child: CustomPaint(
                          painter: WallPainter(
                            imageToPaint: _segmentationOverlay!,
                          ),
                        ),
                      ),
                  ],
                ),
              ),
            )
          else
            // Loading screen
            const Center(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  CircularProgressIndicator(color: Colors.white),
                  SizedBox(height: 16),
                  Text(
                    '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã...',
                    style: TextStyle(color: Colors.white, fontSize: 16),
                  ),
                ],
              ),
            ),

          // Debug info
          if (_showDebugInfo)
            Positioned(
              top: 16,
              right: 16,
              child: Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.black.withOpacity(0.8),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      '–û—Ç–ª–∞–¥–∫–∞:',
                      style: TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      '–í—Ä–µ–º—è: ${_lastProcessingTimeMs}ms (FAST)',
                      style:
                          const TextStyle(color: Colors.white70, fontSize: 12),
                    ),
                    Text(
                      '–ö–∞–¥—Ä—ã: $_frameCount',
                      style:
                          const TextStyle(color: Colors.white70, fontSize: 12),
                    ),
                    Text(
                      '–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è: ${_segmentationFrameCount} (–∫–∞–∂–¥—ã–µ $_segmentationEveryNFrames)',
                      style:
                          const TextStyle(color: Colors.white70, fontSize: 10),
                    ),
                    Text(
                      'FPS: ${_frameCount > 0 ? (_frameCount / (DateTime.now().difference(_lastSegmentationTime).inSeconds + 1)).toStringAsFixed(1) : "0"}',
                      style: const TextStyle(color: Colors.green, fontSize: 12),
                    ),
                    Text(
                      'CV –∏–∑–æ–ª—è—Ç: ${_enableCVProcessing ? "–í–ö–õ" : "–í–´–ö–õ"}',
                      style: TextStyle(
                        color: _enableCVProcessing ? Colors.red : Colors.green,
                        fontSize: 12,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    Text(
                      '–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: ${_useFastMode ? "–í–ö–õ" : "–í–´–ö–õ"}',
                      style: TextStyle(
                        color: _useFastMode ? Colors.green : Colors.orange,
                        fontSize: 12,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    Text(
                      '–ú–æ–¥–µ–ª—å: ${_modelNames[_currentModelIndex]}',
                      style: TextStyle(
                        color: _modelColors[_currentModelIndex],
                        fontSize: 12,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å CV –∏–∑–æ–ª—è—Ç–∞
                    GestureDetector(
                      onTap: () {
                        setState(() {
                          _enableCVProcessing = !_enableCVProcessing;
                        });
                        debugPrint(
                            'üîÑ CV –∏–∑–æ–ª—è—Ç: ${_enableCVProcessing ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω"}');
                      },
                      child: Container(
                        padding: EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          color: _enableCVProcessing
                              ? Colors.red.withOpacity(0.8)
                              : Colors.green.withOpacity(0.8),
                          borderRadius: BorderRadius.circular(6),
                        ),
                        child: Text(
                            _enableCVProcessing ? 'üêå CV ON' : '‚ö° FAST ONLY',
                            style: TextStyle(
                                color: Colors.white,
                                fontSize: 12,
                                fontWeight: FontWeight.bold)),
                      ),
                    ),
                    const SizedBox(height: 4),
                    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞
                    GestureDetector(
                      onTap: () {
                        setState(() {
                          _useFastMode = !_useFastMode;
                          if (_useFastMode) {
                            _segmentationEveryNFrames = 1; // –ö–∞–∂–¥—ã–π –∫–∞–¥—Ä
                          } else {
                            _segmentationEveryNFrames = 3; // –ö–∞–∂–¥—ã–µ 3 –∫–∞–¥—Ä–∞
                          }
                        });
                        debugPrint(
                            '‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: ${_useFastMode ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω"}');
                      },
                      child: Container(
                        padding: EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          color: _useFastMode
                              ? Colors.green.withOpacity(0.8)
                              : Colors.orange.withOpacity(0.8),
                          borderRadius: BorderRadius.circular(6),
                        ),
                        child: Text(_useFastMode ? '‚ö° –¢–£–†–ë–û' : 'üê¢ –ù–û–†–ú–ê',
                            style: TextStyle(
                                color: Colors.white,
                                fontSize: 12,
                                fontWeight: FontWeight.bold)),
                      ),
                    ),
                  ],
                ),
              ),
            ),

          // Bottom controls
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.9),
                borderRadius: const BorderRadius.only(
                  topLeft: Radius.circular(16),
                  topRight: Radius.circular(16),
                ),
              ),
              child: SafeArea(
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    // Segmentation toggle button
                    IconButton(
                      onPressed: () {
                        setState(() {
                          _showSegmentation = !_showSegmentation;
                        });
                      },
                      icon: Icon(
                        _showSegmentation
                            ? Icons.visibility
                            : Icons.visibility_off,
                        color: _showSegmentation ? Colors.green : Colors.white,
                        size: 32,
                      ),
                    ),

                    // Model switch button
                    IconButton(
                      onPressed: () async {
                        if (_isServiceBusy)
                          return; // –ù–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

                        setState(() {
                          _currentModelIndex =
                              (_currentModelIndex + 1) % _modelNames.length;
                        });

                        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
                        try {
                          if (_currentModelIndex == 0) {
                            await _segmentationService.loadModel();
                            _isSegmentationInitialized = true;
                            debugPrint(
                                '‚úÖ Switched to ${_modelNames[_currentModelIndex]} model');
                          } else {
                            await _wallSegmentationService.loadModel(
                                modelIndex: _currentModelIndex);
                            _isWallSegmentationInitialized = true;
                            debugPrint(
                                '‚úÖ Switched to ${_modelNames[_currentModelIndex]} model');
                          }
                        } catch (e) {
                          debugPrint('‚ùå Failed to switch model: $e');
                          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–∞–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                          setState(() {
                            _currentModelIndex =
                                (_currentModelIndex - 1 + _modelNames.length) %
                                    _modelNames.length;
                          });
                        }
                      },
                      icon: Icon(
                        _currentModelIndex == 0
                            ? Icons.tune
                            : _currentModelIndex == 1
                                ? Icons.auto_awesome
                                : Icons.speed,
                        color: _modelColors[_currentModelIndex],
                        size: 32,
                      ),
                    ),

                    // Debug info toggle
                    IconButton(
                      onPressed: () {
                        setState(() {
                          _showDebugInfo = !_showDebugInfo;
                        });
                      },
                      icon: Icon(
                        _showDebugInfo ? Icons.info : Icons.info_outline,
                        color: _showDebugInfo ? Colors.green : Colors.white,
                        size: 32,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Size _getOriginalImageSize() {
    if (_lastCvResult != null) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ CV
      return Size(_lastCvResult!.imageWidth.toDouble(),
          _lastCvResult!.imageHeight.toDouble());
    }
    if (_cameraController != null && _cameraController!.value.isInitialized) {
      // –§–æ–ª–ª–±—ç–∫ –Ω–∞ —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—å—é, –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –µ—â–µ –Ω–µ—Ç
      return _cameraController!.value.previewSize!;
    }
    return Size.zero; // –•—É–¥—à–∏–π —Å–ª—É—á–∞–π
  }
}

/// Generic painter for segmentation or painted overlays.
/// Handles correct scaling and aspect ratio.
class WallPainter extends CustomPainter {
  final ui.Image imageToPaint;

  WallPainter({
    required this.imageToPaint,
  });

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint();
    final srcRect = Rect.fromLTWH(
        0, 0, imageToPaint.width.toDouble(), imageToPaint.height.toDouble());
    final dstRect = Rect.fromLTWH(0, 0, size.width, size.height);

    canvas.drawImageRect(imageToPaint, srcRect, dstRect, paint);
  }

  @override
  bool shouldRepaint(covariant WallPainter oldDelegate) {
    return oldDelegate.imageToPaint != imageToPaint;
  }
}
