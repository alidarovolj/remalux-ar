import 'dart:async';
import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:tflite_flutter/tflite_flutter.dart';
import 'performance_profiler.dart';

/// –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
class ModelMetadata {
  final String name;
  final String assetPath;
  final String? configPath;
  final String? labelsPath;
  final int sizeMB;
  final String delegateType;

  ModelMetadata({
    required this.name,
    required this.assetPath,
    this.configPath,
    this.labelsPath,
    required this.sizeMB,
    this.delegateType = 'CPU',
  });
}

/// –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å –µ–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏
class LoadedModel {
  final ModelMetadata metadata;
  final Interpreter interpreter;
  final Map<String, dynamic>? config;
  final List<String>? labels;
  final DateTime loadedAt;

  LoadedModel({
    required this.metadata,
    required this.interpreter,
    this.config,
    this.labels,
    required this.loadedAt,
  });

  /// –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–Ω–∑–æ—Ä–∞
  List<int> get inputShape => interpreter.getInputTensor(0).shape;

  /// –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–Ω–∑–æ—Ä–∞
  List<int> get outputShape => interpreter.getOutputTensor(0).shape;

  /// –û—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –º–æ–¥–µ–ª–∏
  void dispose() {
    try {
      interpreter.close();
      debugPrint('üßπ –ú–æ–¥–µ–ª—å ${metadata.name} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞ –∏–∑ –ø–∞–º—è—Ç–∏');
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ ${metadata.name}: $e');
    }
  }
}

/// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º TFLite –º–æ–¥–µ–ª–µ–π
class ModelManager {
  static final ModelManager _instance = ModelManager._internal();
  factory ModelManager() => _instance;
  ModelManager._internal();

  final Map<String, LoadedModel> _loadedModels = {};
  final PerformanceProfiler _profiler = PerformanceProfiler();

  /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
  static const int maxLoadedModels = 2;

  /// –¢–∞–π–º–∞—É—Ç –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–æ–¥–µ–ª–µ–π (–≤ –º–∏–Ω—É—Ç–∞—Ö)
  static const int modelTimeoutMinutes = 5;

  /// –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
  static final Map<String, ModelMetadata> availableModels = {
    'ade20k_standard': ModelMetadata(
      name: 'ADE20K Standard',
      assetPath: 'assets/ml/deeplabv3_ade20k_fp16.tflite',
      labelsPath: 'assets/ml/ade20k_labels.txt',
      sizeMB: 2,
      delegateType: 'CPU',
    ),
    'wall_specialized': ModelMetadata(
      name: 'Wall Specialized',
      assetPath: 'assets/ml/wall_segmentation_specialized.tflite',
      configPath: 'assets/ml/wall_model_config.json',
      sizeMB: 3,
      delegateType: 'CPU',
    ),
    'wall_mobile': ModelMetadata(
      name: 'Wall Mobile Optimized',
      assetPath: 'assets/ml/wall_segmentation_mobile_optimized.tflite',
      configPath: 'assets/ml/wall_segmentation_mobile_optimized_config.json',
      sizeMB: 7,
      delegateType: 'CPU',
    ),
  };

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –ø–æ –∫–ª—é—á—É
  Future<LoadedModel> loadModel(String modelKey, {bool useGPU = false}) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –≤ –ø–∞–º—è—Ç–∏
    if (_loadedModels.containsKey(modelKey)) {
      final model = _loadedModels[modelKey]!;
      debugPrint('‚ôªÔ∏è –ú–æ–¥–µ–ª—å ${model.metadata.name} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
      return model;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
    if (!availableModels.containsKey(modelKey)) {
      throw ArgumentError('–ú–æ–¥–µ–ª—å —Å –∫–ª—é—á–æ–º "$modelKey" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    var metadata = availableModels[modelKey]!;

    return await _profiler.profileOperation('loadModel_$modelKey', () async {
      debugPrint('üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å: ${metadata.name}');

      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ—Å—Ç–æ, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
      await _enforceMemoryLimits();

      try {
        // –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞
        final options = InterpreterOptions();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ–ª–µ–≥–∞—Ç—ã
        if (useGPU) {
          try {
            final gpuDelegate = GpuDelegate();
            options.addDelegate(gpuDelegate);
            metadata = ModelMetadata(
              name: metadata.name,
              assetPath: metadata.assetPath,
              configPath: metadata.configPath,
              labelsPath: metadata.labelsPath,
              sizeMB: metadata.sizeMB,
              delegateType: 'GPU',
            );
          } catch (e) {
            debugPrint('‚ö†Ô∏è GPU –¥–µ–ª–µ–≥–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $e');
          }
        } else {
          try {
            final xnnpackDelegate = XNNPackDelegate();
            options.addDelegate(xnnpackDelegate);
          } catch (e) {
            debugPrint('‚ö†Ô∏è XNNPACK –¥–µ–ª–µ–≥–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $e');
          }
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
        final interpreter = await Interpreter.fromAsset(
          metadata.assetPath,
          options: options,
        );

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        Map<String, dynamic>? config;
        if (metadata.configPath != null) {
          try {
            final configString =
                await rootBundle.loadString(metadata.configPath!);
            config = jsonDecode(configString);
          } catch (e) {
            debugPrint('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥: $e');
          }
        }

        List<String>? labels;
        if (metadata.labelsPath != null) {
          try {
            final labelsString =
                await rootBundle.loadString(metadata.labelsPath!);
            labels =
                labelsString.split('\n').where((l) => l.isNotEmpty).toList();
          } catch (e) {
            debugPrint('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∫–∏: $e');
          }
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        final loadedModel = LoadedModel(
          metadata: metadata,
          interpreter: interpreter,
          config: config,
          labels: labels,
          loadedAt: DateTime.now(),
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        _loadedModels[modelKey] = loadedModel;

        debugPrint('‚úÖ –ú–æ–¥–µ–ª—å ${metadata.name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        debugPrint('   –í—Ö–æ–¥–Ω–æ–π —Ä–∞–∑–º–µ—Ä: ${loadedModel.inputShape}');
        debugPrint('   –í—ã—Ö–æ–¥–Ω–æ–π —Ä–∞–∑–º–µ—Ä: ${loadedModel.outputShape}');
        debugPrint('   –î–µ–ª–µ–≥–∞—Ç: ${metadata.delegateType}');

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        _profiler.recordModelMetrics(
          modelName: metadata.name,
          inferencLatencyMs: 0, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ inference
          preprocessingTimeMs: 0,
          postprocessingTimeMs: 0,
          modelSizeMB: metadata.sizeMB,
          delegateType: metadata.delegateType,
        );

        return loadedModel;
      } catch (e, stackTrace) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ ${metadata.name}: $e');
        debugPrint('Stack trace: $stackTrace');
        rethrow;
      }
    });
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏)
  LoadedModel? getLoadedModel(String modelKey) {
    return _loadedModels[modelKey];
  }

  /// –í—ã–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–æ–¥–µ–ª—å
  Future<void> unloadModel(String modelKey) async {
    final model = _loadedModels[modelKey];
    if (model == null) {
      debugPrint('‚ö†Ô∏è –ú–æ–¥–µ–ª—å "$modelKey" –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
      return;
    }

    model.dispose();
    _loadedModels.remove(modelKey);

    debugPrint('üóëÔ∏è –ú–æ–¥–µ–ª—å ${model.metadata.name} –≤—ã–≥—Ä—É–∂–µ–Ω–∞');
  }

  /// –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏
  Future<void> unloadAllModels() async {
    debugPrint('üßπ –í—ã–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏...');

    for (final entry in _loadedModels.entries) {
      entry.value.dispose();
    }

    _loadedModels.clear();
    debugPrint('‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ –≤—ã–≥—Ä—É–∂–µ–Ω—ã');
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å (—Å –≤—ã–≥—Ä—É–∑–∫–æ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–π)
  Future<LoadedModel> switchToModel(String newModelKey,
      {bool useGPU = false}) async {
    debugPrint('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –º–æ–¥–µ–ª—å: $newModelKey');

    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–æ–¥–µ–ª–∏
    final currentModels = Map<String, LoadedModel>.from(_loadedModels);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
    final newModel = await loadModel(newModelKey, useGPU: useGPU);

    // –í—ã–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–∫—Ä–æ–º–µ –Ω–æ–≤–æ–π)
    for (final key in currentModels.keys) {
      if (key != newModelKey) {
        await unloadModel(key);
      }
    }

    return newModel;
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
  Future<void> forceGarbageCollection() async {
    debugPrint('üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞...');

    // –í—ã–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏
    await _cleanupOldModels();

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º GC (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ)
    if (kDebugMode) {
      // Dart –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–≥–æ API –¥–ª—è GC, –Ω–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É
      // –∫–æ—Ç–æ—Ä–∞—è –∑–∞—Å—Ç–∞–≤–∏—Ç GC —Å—Ä–∞–±–æ—Ç–∞—Ç—å
      final tempList = List.generate(1000, (i) => Uint8List(1024));
      tempList.clear();
    }

    debugPrint('‚úÖ –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
  Map<String, dynamic> getMemoryStats() {
    int totalModels = _loadedModels.length;
    int totalSizeMB = _loadedModels.isEmpty
        ? 0
        : _loadedModels.values
            .map((m) => m.metadata.sizeMB)
            .reduce((a, b) => a + b);

    List<Map<String, dynamic>> modelDetails = _loadedModels.entries
        .map((entry) => {
              'key': entry.key,
              'name': entry.value.metadata.name,
              'sizeMB': entry.value.metadata.sizeMB,
              'delegate': entry.value.metadata.delegateType,
              'loadedAt': entry.value.loadedAt.toIso8601String(),
            })
        .toList();

    return {
      'totalModels': totalModels,
      'totalSizeMB': totalSizeMB,
      'maxModels': maxLoadedModels,
      'modelDetails': modelDetails,
      'timestamp': DateTime.now().toIso8601String(),
    };
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
  List<String> getAvailableModelKeys() {
    return availableModels.keys.toList();
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å
  bool isModelLoaded(String modelKey) {
    return _loadedModels.containsKey(modelKey);
  }

  /// –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ª–∏–º–∏—Ç–æ–≤ –ø–∞–º—è—Ç–∏
  Future<void> _enforceMemoryLimits() async {
    if (_loadedModels.length >= maxLoadedModels) {
      // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –º–æ–¥–µ–ª—å
      String? oldestKey;
      DateTime? oldestTime;

      for (final entry in _loadedModels.entries) {
        if (oldestTime == null || entry.value.loadedAt.isBefore(oldestTime)) {
          oldestTime = entry.value.loadedAt;
          oldestKey = entry.key;
        }
      }

      if (oldestKey != null) {
        debugPrint(
            'üóëÔ∏è –í—ã–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—É—é –º–æ–¥–µ–ª—å –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞: $oldestKey');
        await unloadModel(oldestKey);
      }
    }
  }

  /// –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π
  Future<void> _cleanupOldModels() async {
    final now = DateTime.now();
    final keysToRemove = <String>[];

    for (final entry in _loadedModels.entries) {
      final age = now.difference(entry.value.loadedAt).inMinutes;
      if (age > modelTimeoutMinutes) {
        keysToRemove.add(entry.key);
      }
    }

    for (final key in keysToRemove) {
      debugPrint('‚è∞ –í—ã–≥—Ä—É–∂–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é –º–æ–¥–µ–ª—å: $key');
      await unloadModel(key);
    }
  }

  /// –ú–µ—Ç–æ–¥ dispose –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
  void dispose() {
    unloadAllModels();
  }
}
