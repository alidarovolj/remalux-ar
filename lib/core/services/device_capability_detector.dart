import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

/// –¢–∏–ø GPU –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
enum GPUArchitecture {
  adreno, // Qualcomm Snapdragon
  mali, // ARM Mali (MediaTek, Exynos)
  appleGPU, // Apple Neural Engine
  tegra, // NVIDIA Tegra
  unknown,
}

/// –ö–ª–∞—Å—Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
enum DevicePerformanceTier {
  highEnd, // –§–ª–∞–≥–º–∞–Ω—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  midRange, // –°—Ä–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç
  lowEnd, // –ë—é–¥–∂–µ—Ç–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
class DeviceCapabilities {
  final String deviceModel;
  final String osVersion;
  final GPUArchitecture gpuArchitecture;
  final String gpuModel;
  final DevicePerformanceTier performanceTier;
  final int totalRAMMB;
  final int availableRAMMB;
  final bool supportsNNAPI;
  final bool supportsCoreML;
  final bool supportsGPUDelegate;
  final int recommendedModelIndex;
  final Map<String, dynamic> optimizationSettings;

  DeviceCapabilities({
    required this.deviceModel,
    required this.osVersion,
    required this.gpuArchitecture,
    required this.gpuModel,
    required this.performanceTier,
    required this.totalRAMMB,
    required this.availableRAMMB,
    required this.supportsNNAPI,
    required this.supportsCoreML,
    required this.supportsGPUDelegate,
    required this.recommendedModelIndex,
    required this.optimizationSettings,
  });

  Map<String, dynamic> toJson() => {
        'deviceModel': deviceModel,
        'osVersion': osVersion,
        'gpuArchitecture': gpuArchitecture.name,
        'gpuModel': gpuModel,
        'performanceTier': performanceTier.name,
        'totalRAMMB': totalRAMMB,
        'availableRAMMB': availableRAMMB,
        'supportsNNAPI': supportsNNAPI,
        'supportsCoreML': supportsCoreML,
        'supportsGPUDelegate': supportsGPUDelegate,
        'recommendedModelIndex': recommendedModelIndex,
        'optimizationSettings': optimizationSettings,
      };
}

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
class DeviceCapabilityDetector {
  static final DeviceCapabilityDetector _instance =
      DeviceCapabilityDetector._internal();
  factory DeviceCapabilityDetector() => _instance;
  DeviceCapabilityDetector._internal();

  DeviceCapabilities? _capabilities;
  bool _isDetectionCompleted = false;

  /// –ü–æ–ª—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)
  Future<DeviceCapabilities> getDeviceCapabilities() async {
    if (_capabilities != null && _isDetectionCompleted) {
      return _capabilities!;
    }

    _capabilities = await _detectCapabilities();
    _isDetectionCompleted = true;
    return _capabilities!;
  }

  /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–µ—Ç–µ–∫—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  Future<DeviceCapabilities> _detectCapabilities() async {
    debugPrint('üîç Detecting device capabilities...');

    String deviceModel = 'Unknown';
    String osVersion = 'Unknown';
    int totalRAMMB = 4096; // Fallback –∑–Ω–∞—á–µ–Ω–∏–µ

    if (Platform.isAndroid) {
      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –¥–ª—è Android
      deviceModel = 'Android Device';
      osVersion = 'Android';
      totalRAMMB = 4096; // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    } else if (Platform.isIOS) {
      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –¥–ª—è iOS
      deviceModel = 'iOS Device';
      osVersion = 'iOS';
      totalRAMMB = 6144; // iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –±–æ–ª—å—à–µ RAM
    }

    // –î–µ—Ç–µ–∫—Ü–∏—è GPU –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    final gpuInfo = await _detectGPUArchitecture(deviceModel);
    final gpuArchitecture = gpuInfo['architecture'] as GPUArchitecture;
    final gpuModel = gpuInfo['model'] as String;

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    final performanceTier =
        _determinePerformanceTier(deviceModel, totalRAMMB, gpuArchitecture);

    // –î–µ—Ç–µ–∫—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–µ–ª–µ–≥–∞—Ç–æ–≤
    final supportsNNAPI = Platform.isAndroid && await _testNNAPISupport();
    final supportsCoreML = Platform.isIOS && await _testCoreMLSupport();
    final supportsGPUDelegate = await _testGPUDelegateSupport();

    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏ (70% –æ—Ç –æ–±—â–µ–π)
    final availableRAMMB = (totalRAMMB * 0.7).round();

    // –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    final recommendedModelIndex =
        _selectOptimalModel(performanceTier, gpuArchitecture, availableRAMMB);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    final optimizationSettings = _generateOptimizationSettings(
      gpuArchitecture,
      performanceTier,
      supportsNNAPI,
      supportsCoreML,
      supportsGPUDelegate,
    );

    final capabilities = DeviceCapabilities(
      deviceModel: deviceModel,
      osVersion: osVersion,
      gpuArchitecture: gpuArchitecture,
      gpuModel: gpuModel,
      performanceTier: performanceTier,
      totalRAMMB: totalRAMMB,
      availableRAMMB: availableRAMMB,
      supportsNNAPI: supportsNNAPI,
      supportsCoreML: supportsCoreML,
      supportsGPUDelegate: supportsGPUDelegate,
      recommendedModelIndex: recommendedModelIndex,
      optimizationSettings: optimizationSettings,
    );

    debugPrint('‚úÖ Device capabilities detected:');
    debugPrint('   Device: $deviceModel');
    debugPrint('   GPU: ${gpuArchitecture.name} ($gpuModel)');
    debugPrint('   Tier: ${performanceTier.name}');
    debugPrint('   RAM: ${totalRAMMB}MB (${availableRAMMB}MB available)');
    debugPrint('   Recommended model: $recommendedModelIndex');
    debugPrint(
        '   NNAPI: $supportsNNAPI, CoreML: $supportsCoreML, GPU: $supportsGPUDelegate');

    return capabilities;
  }

  /// –î–µ—Ç–µ–∫—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã GPU
  Future<Map<String, dynamic>> _detectGPUArchitecture(
      String deviceModel) async {
    final model = deviceModel.toLowerCase();

    // Apple —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if (Platform.isIOS || model.contains('iphone') || model.contains('ipad')) {
      return {
        'architecture': GPUArchitecture.appleGPU,
        'model': 'Apple GPU',
      };
    }

    // Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é/–º–æ–¥–µ–ª–∏
    if (model.contains('samsung')) {
      if (model.contains('galaxy s') ||
          model.contains('galaxy note') ||
          model.contains('galaxy a')) {
        // Samsung –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Snapdragon –∏–ª–∏ Exynos
        if (model.contains('sm-') || await _isSnapdragonDevice()) {
          return {
            'architecture': GPUArchitecture.adreno,
            'model': 'Adreno (Snapdragon)',
          };
        } else {
          return {
            'architecture': GPUArchitecture.mali,
            'model': 'Mali (Exynos)',
          };
        }
      }
    }

    if (model.contains('xiaomi') ||
        model.contains('redmi') ||
        model.contains('poco')) {
      return {
        'architecture': GPUArchitecture.adreno,
        'model': 'Adreno (Snapdragon)',
      };
    }

    if (model.contains('oppo') ||
        model.contains('oneplus') ||
        model.contains('realme')) {
      return {
        'architecture': GPUArchitecture.adreno,
        'model': 'Adreno (Snapdragon)',
      };
    }

    if (model.contains('vivo')) {
      return {
        'architecture': GPUArchitecture.adreno,
        'model': 'Adreno (Snapdragon)',
      };
    }

    if (model.contains('huawei') || model.contains('honor')) {
      return {
        'architecture': GPUArchitecture.mali,
        'model': 'Mali (Kirin)',
      };
    }

    if (model.contains('mediatek') || model.contains('mt')) {
      return {
        'architecture': GPUArchitecture.mali,
        'model': 'Mali (MediaTek)',
      };
    }

    if (model.contains('nvidia') || model.contains('tegra')) {
      return {
        'architecture': GPUArchitecture.tegra,
        'model': 'Tegra GPU',
      };
    }

    // Fallback - –ø—ã—Ç–∞–µ–º—Å—è –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    if (Platform.isAndroid) {
      if (await _isSnapdragonDevice()) {
        return {
          'architecture': GPUArchitecture.adreno,
          'model': 'Adreno (detected)',
        };
      }
    }

    return {
      'architecture': GPUArchitecture.unknown,
      'model': 'Unknown GPU',
    };
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Snapdragon —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  Future<bool> _isSnapdragonDevice() async {
    if (!Platform.isAndroid) return false;

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ platform channel (—Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Ç–∏–≤–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ª–æ–≥–∏–∫—É
      return false;
    } catch (e) {
      return false;
    }
  }

  /// –û—Ü–µ–Ω–∫–∞ RAM –¥–ª—è Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  int _estimateAndroidRAM(String deviceModel) {
    // –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏
    final model = deviceModel.toLowerCase();

    if (model.contains('flagship') ||
        model.contains('pro') ||
        model.contains('ultra')) {
      return 8192; // 8GB –¥–ª—è —Ñ–ª–∞–≥–º–∞–Ω–æ–≤
    } else if (model.contains('plus') || model.contains('note')) {
      return 6144; // 6GB –¥–ª—è —Å—Ç–∞—Ä—à–∏—Ö –º–æ–¥–µ–ª–µ–π
    } else {
      return 4096; // 4GB –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
    }
  }

  /// –û—Ü–µ–Ω–∫–∞ RAM –¥–ª—è iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  int _estimateIOSRAM(String model) {
    final modelLower = model.toLowerCase();

    if (modelLower.contains('iphone 15') || modelLower.contains('iphone 14')) {
      return 6144; // 6GB –¥–ª—è –Ω–æ–≤—ã—Ö iPhone
    } else if (modelLower.contains('iphone 13') ||
        modelLower.contains('iphone 12')) {
      return 6144; // 6GB
    } else if (modelLower.contains('ipad pro')) {
      return 8192; // 8GB –¥–ª—è iPad Pro
    } else if (modelLower.contains('ipad')) {
      return 4096; // 4GB –¥–ª—è –æ–±—ã—á–Ω—ã—Ö iPad
    } else {
      return 4096; // 4GB –¥–ª—è —Å—Ç–∞—Ä—ã—Ö iPhone
    }
  }

  /// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  DevicePerformanceTier _determinePerformanceTier(
      String deviceModel, int totalRAMMB, GPUArchitecture gpuArchitecture) {
    final model = deviceModel.toLowerCase();

    // High-end –∫—Ä–∏—Ç–µ—Ä–∏–∏
    if (totalRAMMB >= 8192) return DevicePerformanceTier.highEnd;

    if (gpuArchitecture == GPUArchitecture.appleGPU) {
      return DevicePerformanceTier.highEnd; // Apple —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±—ã—á–Ω–æ high-end
    }

    if (model.contains('flagship') ||
        model.contains('pro') ||
        model.contains('ultra') ||
        model.contains('galaxy s') ||
        model.contains('oneplus') ||
        model.contains('xiaomi 1') ||
        totalRAMMB >= 6144) {
      return DevicePerformanceTier.highEnd;
    }

    // Low-end –∫—Ä–∏—Ç–µ—Ä–∏–∏
    if (totalRAMMB <= 3072 ||
        model.contains('lite') ||
        model.contains('go') ||
        model.contains('mini')) {
      return DevicePerformanceTier.lowEnd;
    }

    // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ - mid-range
    return DevicePerformanceTier.midRange;
  }

  /// –¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ NNAPI
  Future<bool> _testNNAPISupport() async {
    if (!Platform.isAndroid) return false;

    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–µ–Ω platform channel –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ NNAPI
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è Android 8+ (API 27+)
      return true;
    } catch (e) {
      return false;
    }
  }

  /// –¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Core ML
  Future<bool> _testCoreMLSupport() async {
    if (!Platform.isIOS) return false;

    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Core ML
      return true;
    } catch (e) {
      return false;
    }
  }

  /// –¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ GPU –¥–µ–ª–µ–≥–∞—Ç–∞
  Future<bool> _testGPUDelegateSupport() async {
    try {
      // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      return true;
    } catch (e) {
      return false;
    }
  }

  /// –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
  int _selectOptimalModel(
    DevicePerformanceTier tier,
    GPUArchitecture gpu,
    int availableRAMMB,
  ) {
    // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏:
    // 0 = ADE20K Standard (2MB)
    // 1 = Wall Specialized (3MB)
    // 2 = Wall Mobile Optimized (7MB)

    switch (tier) {
      case DevicePerformanceTier.highEnd:
        // –§–ª–∞–≥–º–∞–Ω—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—É—é –º–æ–¥–µ–ª—å
        if (gpu == GPUArchitecture.adreno) {
          return 1; // Specialized –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è Adreno
        } else if (gpu == GPUArchitecture.appleGPU) {
          return 2; // Mobile –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Apple Neural Engine
        } else {
          return 1; // Specialized –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö high-end
        }

      case DevicePerformanceTier.midRange:
        // –°—Ä–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç - –±–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if (availableRAMMB >= 4096) {
          return 1; // Specialized –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏
        } else {
          return 0; // Standard –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
        }

      case DevicePerformanceTier.lowEnd:
        // –ë—é–¥–∂–µ—Ç–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        return 0; // –í—Å–µ–≥–¥–∞ Standard –º–æ–¥–µ–ª—å
    }
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  Map<String, dynamic> _generateOptimizationSettings(
    GPUArchitecture gpu,
    DevicePerformanceTier tier,
    bool supportsNNAPI,
    bool supportsCoreML,
    bool supportsGPUDelegate,
  ) {
    final settings = <String, dynamic>{};

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–ª–µ–≥–∞—Ç–æ–≤
    if (Platform.isIOS && supportsCoreML) {
      settings['preferredDelegate'] = 'CoreML';
      settings['useGPU'] = true;
    } else if (Platform.isAndroid && supportsNNAPI) {
      settings['preferredDelegate'] = 'NNAPI';
      settings['useGPU'] = supportsGPUDelegate;
    } else if (supportsGPUDelegate) {
      settings['preferredDelegate'] = 'GPU';
      settings['useGPU'] = true;
    } else {
      settings['preferredDelegate'] = 'CPU';
      settings['useGPU'] = false;
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    switch (tier) {
      case DevicePerformanceTier.highEnd:
        settings['numThreads'] = 4;
        settings['targetFPS'] = 30;
        settings['enableOpticalFlow'] = true;
        settings['morphologicalOps'] = true;
        break;

      case DevicePerformanceTier.midRange:
        settings['numThreads'] = 2;
        settings['targetFPS'] = 25;
        settings['enableOpticalFlow'] = false;
        settings['morphologicalOps'] = true;
        break;

      case DevicePerformanceTier.lowEnd:
        settings['numThreads'] = 1;
        settings['targetFPS'] = 20;
        settings['enableOpticalFlow'] = false;
        settings['morphologicalOps'] = false;
        break;
    }

    // GPU-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    switch (gpu) {
      case GPUArchitecture.adreno:
        settings['workgroupSize'] = 16;
        settings['precision'] = 'fp16';
        break;

      case GPUArchitecture.mali:
        settings['workgroupSize'] = 8;
        settings['precision'] = 'fp16';
        break;

      case GPUArchitecture.appleGPU:
        settings['workgroupSize'] = 32;
        settings['precision'] = 'fp16';
        settings['useMetalPerformanceShaders'] = true;
        break;

      default:
        settings['workgroupSize'] = 8;
        settings['precision'] = 'fp32';
        break;
    }

    return settings;
  }

  /// –°–±—Ä–æ—Å –∫—ç—à–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏
  void clearCache() {
    _capabilities = null;
    _isDetectionCompleted = false;
  }
}
