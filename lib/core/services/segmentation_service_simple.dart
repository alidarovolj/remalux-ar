import 'dart:async';
import 'dart:typed_data';
import 'dart:ui' as ui;
import 'dart:io';
import 'package:camera/camera.dart';
import 'package:flutter/foundation.dart';
import 'package:image/image.dart' as img;
import 'package:tflite_flutter/tflite_flutter.dart';

/// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è AI —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å—Ç–µ–Ω –ë–ï–ó –∏–∑–æ–ª—è—Ç–æ–≤
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —Å UI –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
class SegmentationServiceSimple {
  static SegmentationServiceSimple? _instance;
  static SegmentationServiceSimple get instance =>
      _instance ??= SegmentationServiceSimple._internal();

  SegmentationServiceSimple._internal();

  // –ú–æ–¥–µ–ª—å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
  Interpreter? _interpreter;
  bool _isInitialized = false;

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ SegFormer
  List<int>? _inputShape; // [1, 224, 224, 3] –¥–ª—è segformer.tflite
  List<int>? _outputShape; // [1, 224, 224, 1] - –±–∏–Ω–∞—Ä–Ω–∞—è –º–∞—Å–∫–∞ —Å—Ç–µ–Ω
  TensorType? _inputType;
  TensorType? _outputType;

  // –ö–æ–ª–±—ç–∫ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  Function(ui.Path wallMask)? _onSegmentationResult;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π SegFormer –º–æ–¥–µ–ª–∏
  Future<bool> initialize({
    String modelPath = 'assets/ml/segformer.tflite',
  }) async {
    if (_isInitialized) return true;

    try {
      print("ü§ñ SegmentationService: –ó–∞–≥—Ä—É–∂–∞–µ–º SegFormer –º–æ–¥–µ–ª—å $modelPath");

      // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–µ—Ä
      final interpreterOptions = InterpreterOptions();

      // –í–∫–ª—é—á–∞–µ–º GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      try {
        if (Platform.isAndroid || Platform.isIOS) {
          final gpuDelegate = GpuDelegate();
          interpreterOptions.addDelegate(gpuDelegate);
          print(
              "üì± GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è ${Platform.isAndroid ? 'Android' : 'iOS'}");
        }
      } catch (e) {
        print("‚ö†Ô∏è GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU: $e");
      }

      _interpreter =
          await Interpreter.fromAsset(modelPath, options: interpreterOptions);
      _interpreter!.allocateTensors();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ SegFormer –º–æ–¥–µ–ª–∏
      final inputTensor = _interpreter!.getInputTensor(0);
      final outputTensor = _interpreter!.getOutputTensor(0);

      _inputShape = inputTensor.shape;
      _inputType = inputTensor.type;
      _outputShape = outputTensor.shape;
      _outputType = outputTensor.type;

      print('üß† SegFormer Input: $_inputShape, Type: $_inputType');
      print('üß† SegFormer Output: $_outputShape, Type: $_outputType');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è SegFormer –º–æ–¥–µ–ª—å
      if (_inputShape!.length == 4 &&
          _inputShape![1] == 224 &&
          _inputShape![2] == 224 &&
          _inputShape![3] == 3 &&
          _outputShape!.length == 4 &&
          _outputShape![1] == 224 &&
          _outputShape![2] == 224 &&
          _outputShape![3] == 1) {
        print(
            '‚úÖ SegFormer –º–æ–¥–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: input 224x224x3 ‚Üí output 224x224x1');
      } else {
        print('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
      }

      _isInitialized = true;
      print('‚úÖ SegmentationService —Å SegFormer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–æ–≤–∞–Ω');
      return true;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SegmentationService: $e');
      return false;
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞ —Å –∫–∞–º–µ—Ä—ã (–í –ì–õ–ê–í–ù–û–ú –ü–û–¢–û–ö–ï)
  Future<void> processFrame(
    CameraImage cameraImage,
    double screenWidth,
    double screenHeight,
  ) async {
    if (!_isInitialized || _interpreter == null) return;

    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      final convertedImage = _convertCameraImage(cameraImage);
      if (convertedImage == null) return;

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–µ—Å—Ç–æ–≤—É—é –º–∞—Å–∫—É (–ø–æ–∫–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ AI)
      // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å SegFormer
      final wallMask = _createTestWallMask(screenWidth, screenHeight);

      // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
      if (_onSegmentationResult != null) {
        _onSegmentationResult!(wallMask);
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–∞: $e');
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞ —Å –ø—Ä—è–º—ã–º –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–¥–ª—è BLoC)
  Future<ui.Path?> processFrameAndGetMask(
    CameraImage cameraImage,
    double screenWidth,
    double screenHeight,
  ) async {
    if (!_isInitialized || _interpreter == null) return null;

    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      final convertedImage = _convertCameraImage(cameraImage);
      if (convertedImage == null) return null;

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–µ—Å—Ç–æ–≤—É—é –º–∞—Å–∫—É (–ø–æ–∫–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ AI)
      // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å SegFormer
      return _createTestWallMask(screenWidth, screenHeight);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–∞: $e');
      return null;
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –º–∞—Å–∫–∏ —Å—Ç–µ–Ω—ã
  ui.Path _createTestWallMask(double screenWidth, double screenHeight) {
    final wallMask = ui.Path();

    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç–µ–π –∫–∞–∫ "—Å—Ç–µ–Ω—ã" –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç–µ–Ω–∞ (—Ü–µ–Ω—Ç—Ä)
    final centerX = screenWidth / 2;
    final centerY = screenHeight / 2;
    final mainWallWidth = screenWidth * 0.7;
    final mainWallHeight = screenHeight * 0.5;

    wallMask.addRect(ui.Rect.fromCenter(
      center: ui.Offset(centerX, centerY),
      width: mainWallWidth,
      height: mainWallHeight,
    ));

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ —Å—Ç–µ–Ω (–ª–µ–≤–∞—è –∏ –ø—Ä–∞–≤–∞—è)
    final sideWallWidth = screenWidth * 0.15;
    final sideWallHeight = screenHeight * 0.8;

    // –õ–µ–≤–∞—è —Å—Ç–µ–Ω–∞
    wallMask.addRect(ui.Rect.fromLTWH(
      20,
      (screenHeight - sideWallHeight) / 2,
      sideWallWidth,
      sideWallHeight,
    ));

    // –ü—Ä–∞–≤–∞—è —Å—Ç–µ–Ω–∞
    wallMask.addRect(ui.Rect.fromLTWH(
      screenWidth - sideWallWidth - 20,
      (screenHeight - sideWallHeight) / 2,
      sideWallWidth,
      sideWallHeight,
    ));

    print('üé® –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –º–∞—Å–∫–∞ —Å—Ç–µ–Ω—ã: ${screenWidth}x${screenHeight}');
    return wallMask;
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è CameraImage
  img.Image? _convertCameraImage(CameraImage cameraImage) {
    try {
      if (cameraImage.format.group == ImageFormatGroup.bgra8888) {
        return img.Image.fromBytes(
          width: cameraImage.planes[0].width!,
          height: cameraImage.planes[0].height!,
          bytes: cameraImage.planes[0].bytes.buffer,
          order: img.ChannelOrder.bgra,
        );
      } else {
        // YUV420 to RGB –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
        final int width = cameraImage.width;
        final int height = cameraImage.height;
        final image = img.Image(width: width, height: height);

        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        for (int y = 0; y < height && y < 100; ++y) {
          for (int x = 0; x < width && x < 100; ++x) {
            image.setPixelRgb(x, y, 128, 128, 128); // –°–µ—Ä—ã–π —Ü–≤–µ—Ç
          }
        }
        return image;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $e');
      return null;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –Ω–∞ —Å—Ç–µ–Ω–µ
  bool isPointOnWall(ui.Offset point, ui.Path? wallMask) {
    if (wallMask == null) {
      print('‚ö†Ô∏è –ù–µ—Ç –º–∞—Å–∫–∏ —Å—Ç–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—á–∫–∏ $point');
      return false;
    }

    final isOnWall = wallMask.contains(point);
    print('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–∫–∏ $point –Ω–∞ —Å—Ç–µ–Ω–µ: ${isOnWall ? "‚úÖ –î–ê" : "‚ùå –ù–ï–¢"}');
    return isOnWall;
  }

  /// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  Future<void> dispose() async {
    print('üßπ SegmentationService: –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤');

    _interpreter?.close();
    _interpreter = null;

    _isInitialized = false;
  }
}
