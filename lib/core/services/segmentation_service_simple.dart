import 'dart:async';
import 'dart:collection';
import 'dart:typed_data';
import 'dart:ui' as ui;
import 'dart:io';
import 'package:camera/camera.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:image/image.dart' as img;
import 'package:remalux_ar/core/utils/image_converter.dart';
import 'package:tflite_flutter/tflite_flutter.dart';

class SegmentationResult {
  final ui.Path path;
  final List<List<int>> rawMask;
  final int maskWidth;
  final int maskHeight;

  SegmentationResult({
    required this.path,
    required this.rawMask,
    required this.maskWidth,
    required this.maskHeight,
  });
}

/// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è AI —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å—Ç–µ–Ω
class SegmentationServiceSimple {
  static SegmentationServiceSimple? _instance;
  static SegmentationServiceSimple get instance =>
      _instance ??= SegmentationServiceSimple._internal();

  SegmentationServiceSimple._internal();

  // –ú–æ–¥–µ–ª—å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
  Interpreter? _interpreter;
  bool _isInitialized = false;

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ SegFormer
  final int _modelWidth = 224;
  final int _modelHeight = 224;

  // –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—ã—Ä–∞—è –º–∞—Å–∫–∞
  SegmentationResult? _lastResult;

  // –¢–µ–Ω–∑–æ—Ä—ã –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞
  late Tensor _inputTensor;
  late Tensor _outputTensor;

  Future<void> initialize() async {
    if (_isInitialized) return;
    try {
      debugPrint("ü§ñ SegmentationService: –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å segformer.tflite");
      final options = InterpreterOptions();

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∞—Ç GPU –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      if (Platform.isAndroid) {
        options.addDelegate(GpuDelegateV2());
      } else if (Platform.isIOS) {
        options.addDelegate(GpuDelegate());
      }

      _interpreter = await Interpreter.fromAsset('assets/ml/segformer.tflite',
          options: options);

      _inputTensor = _interpreter!.getInputTensor(0);
      _outputTensor = _interpreter!.getOutputTensor(0);

      _isInitialized = true;
      debugPrint('‚úÖ –ú–æ–¥–µ–ª—å segformer.tflite –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.');
      debugPrint(
          'üß† SegFormer Input: ${_inputTensor.shape}, Type: ${_inputTensor.type}');
      debugPrint(
          'üß† SegFormer Output: ${_outputTensor.shape}, Type: ${_outputTensor.type}');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ AI –º–æ–¥–µ–ª–∏: $e');
      rethrow;
    }
  }

  bool get isInitialized => _isInitialized;

  Future<SegmentationResult?> processCameraImage(
      CameraImage image, double screenWidth, double screenHeight) async {
    if (!_isInitialized || _interpreter == null) return null;

    final preprocessedImage = _preprocessCameraImage(image);
    if (preprocessedImage == null) return null;

    // –ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏
    final inputs = [preprocessedImage.reshape(_inputTensor.shape)];
    final outputBuffer = List.filled(_modelWidth * _modelHeight, 0.0)
        .reshape(_outputTensor.shape);

    final outputs = <int, Object>{0: outputBuffer};

    _interpreter!.runForMultipleInputs(inputs, outputs);

    final rawMask = _postProcessOutput(outputBuffer);

    final labeledMask = _findAndLabelConnectedComponents(rawMask);

    final path = _convertRawMaskToPath(labeledMask, screenWidth, screenHeight);

    _lastResult = SegmentationResult(
      path: path,
      rawMask: labeledMask,
      maskWidth: _modelWidth,
      maskHeight: _modelHeight,
    );

    return _lastResult;
  }

  /// –ù–∞—Ö–æ–¥–∏—Ç –∏ –º–∞—Ä–∫–∏—Ä—É–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç–µ–Ω—ã)
  List<List<int>> _findAndLabelConnectedComponents(List<List<int>> mask) {
    int height = mask.length;
    if (height == 0) return mask;
    int width = mask[0].length;
    if (width == 0) return mask;

    List<List<int>> labeledMask =
        List.generate(height, (_) => List.generate(width, (_) => 0));
    int currentLabel = 1;

    for (int y = 0; y < height; y++) {
      for (int x = 0; x < width; x++) {
        // –ï—Å–ª–∏ –ø–∏–∫—Å–µ–ª—å - —ç—Ç–æ —Å—Ç–µ–Ω–∞ (–∑–Ω–∞—á–µ–Ω–∏–µ 1) –∏ –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª –ø–æ–º–µ—á–µ–Ω
        if (mask[y][x] == 1 && labeledMask[y][x] == 0) {
          _labelComponent(mask, labeledMask, x, y, width, height, currentLabel);
          currentLabel++;
        }
      }
    }
    return labeledMask;
  }

  /// –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –æ–¥–Ω–æ–π —Å–≤—è–∑–∞–Ω–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  void _labelComponent(
      List<List<int>> originalMask,
      List<List<int>> labeledMask,
      int x,
      int y,
      int width,
      int height,
      int label) {
    final stack = <(int, int)>[];
    stack.add((x, y));

    while (stack.isNotEmpty) {
      final (curX, curY) = stack.removeLast();

      if (curX < 0 ||
          curX >= width ||
          curY < 0 ||
          curY >= height ||
          originalMask[curY][curX] != 1 || // –ò—â–µ–º "1" –¥–ª—è segformer
          labeledMask[curY][curX] != 0) {
        continue;
      }

      labeledMask[curY][curX] = label;

      stack.add((curX + 1, curY));
      stack.add((curX - 1, curY));
      stack.add((curX, curY + 1));
      stack.add((curX, curY - 1));
    }
  }

  Float32List? _preprocessCameraImage(CameraImage image) {
    final img.Image? rgbImage = ImageConverter.convertCameraImage(image);
    if (rgbImage == null) return null;

    // –ü–æ–≤–æ—Ä–æ—Ç –∏ –æ–±—Ä–µ–∑–∫–∞
    final img.Image rotatedImage = img.copyRotate(rgbImage, angle: 90);
    final img.Image resizedImage =
        img.copyResize(rotatedImage, width: _modelWidth, height: _modelHeight);

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏–∫—Å–µ–ª–µ–π
    final imageBytes = resizedImage.getBytes(order: img.ChannelOrder.rgb);
    final floatBytes = Float32List(_modelWidth * _modelHeight * 3);
    for (int i = 0; i < imageBytes.length; i++) {
      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [-1, 1] –¥–ª—è Segformer
      floatBytes[i] = (imageBytes[i] / 127.5) - 1.0;
    }

    return floatBytes;
  }

  /// –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –º–æ–¥–µ–ª–∏: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ 2D-–º–∞—Å—Å–∏–≤ (–º–∞—Å–∫—É)
  List<List<int>> _postProcessOutput(List<dynamic> output) {
    final maskData = output[0] as List<List<List<double>>>;
    final rawMask = List.generate(
        _modelHeight, (y) => List.generate(_modelWidth, (x) => 0));

    for (int y = 0; y < _modelHeight; y++) {
      for (int x = 0; x < _modelWidth; x++) {
        // –î–ª—è segformer, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ > 0, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ —Å—Ç–µ–Ω–∞
        if (maskData[y][x][0] > 0.0) {
          rawMask[y][x] = 1;
        }
      }
    }
    return rawMask;
  }

  /// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—ã—Ä—É—é –º–∞—Å–∫—É –≤ –æ–±—ä–µ–∫—Ç Path –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
  ui.Path _convertRawMaskToPath(
      List<List<int>> rawMask, double screenWidth, double screenHeight) {
    final path = ui.Path();
    final modelHeight = rawMask.length;
    if (modelHeight == 0) return path;
    final modelWidth = rawMask[0].length;
    if (modelWidth == 0) return path;

    final double scaleX = screenWidth / modelWidth;
    final double scaleY = screenHeight / modelHeight;

    for (int y = 0; y < modelHeight; y++) {
      for (int x = 0; x < modelWidth; x++) {
        if (rawMask[y][x] != 0) {
          // –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∏–∫—Å–µ–ª—è –º–∞—Å–∫–∏
          path.addRect(Rect.fromLTWH(
            x * scaleX,
            y * scaleY,
            scaleX,
            scaleY,
          ));
        }
      }
    }
    return path;
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –¥–ª—è –∑–∞–∫—Ä–∞—à–µ–Ω–Ω–æ–π —Å—Ç–µ–Ω—ã –ø–æ —Ç–æ—á–∫–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
  ui.Path? getPaintedWallPath(
      ui.Offset screenPoint, double screenWidth, double screenHeight) {
    if (_lastResult == null) return null;

    final modelPoint =
        _screenToModelCoordinates(screenPoint, screenWidth, screenHeight);
    if (modelPoint == null) return null;

    final int x = modelPoint.dx.toInt();
    final int y = modelPoint.dy.toInt();

    final floodFillMask = _floodFill(
      _lastResult!.rawMask, // –ú–∞—Å–∫–∞ —É–∂–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ ID
      x,
      y,
      _lastResult!.maskWidth,
      _lastResult!.maskHeight,
    );

    if (floodFillMask == null) return null; // –¢–æ—á–∫–∞ –Ω–µ –Ω–∞ —Å—Ç–µ–Ω–µ

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –º–∞—Å–∫—É –∑–∞–ª–∏—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤ Path
    final paintedPath =
        _convertRawMaskToPath(floodFillMask, screenWidth, screenHeight);

    return paintedPath;
  }

  /// –ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–ª–∏–≤–∫–∏ (Flood Fill) –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
  List<List<int>>? _floodFill(
    List<List<int>> mask,
    int startX,
    int startY,
    int width,
    int height,
  ) {
    if (startX < 0 || startX >= width || startY < 0 || startY >= height) {
      return null;
    }

    final targetValue = mask[startY][startX];
    if (targetValue == 0) {
      return null; // –ù–µ–ª—å–∑—è –∑–∞–ª–∏—Ç—å —Ñ–æ–Ω
    }

    final filledMask =
        List.generate(height, (_) => List.generate(width, (_) => 0));

    // –û—á–µ—Ä–µ–¥—å –¥–ª—è –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –∑–∞–ª–∏–≤–∫–∏
    final pointsQueue = Queue<(int, int)>();
    pointsQueue.add((startX, startY));

    // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
    final visited = <(int, int)>{(startX, startY)};

    while (pointsQueue.isNotEmpty) {
      final (x, y) = pointsQueue.removeFirst();
      filledMask[y][x] = targetValue;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º 4-—Ö —Å–æ—Å–µ–¥–µ–π
      final neighbors = [(x, y - 1), (x, y + 1), (x - 1, y), (x + 1, y)];

      for (final (nx, ny) in neighbors) {
        if (nx >= 0 &&
            nx < width &&
            ny >= 0 &&
            ny < height &&
            mask[ny][nx] == targetValue &&
            !visited.contains((nx, ny))) {
          visited.add((nx, ny));
          pointsQueue.add((nx, ny));
        }
      }
    }
    return filledMask;
  }

  /// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–∫—Ä–∞–Ω–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –º–∞—Å–∫–µ –º–æ–¥–µ–ª–∏
  ui.Offset? _screenToModelCoordinates(
    ui.Offset screenPoint,
    double screenWidth,
    double screenHeight,
  ) {
    if (_lastResult == null) return null;
    final modelWidth = _lastResult!.maskWidth;
    final modelHeight = _lastResult!.maskHeight;

    final double x = (screenPoint.dx / screenWidth) * modelWidth;
    final double y = (screenPoint.dy / screenHeight) * modelHeight;

    if (x >= 0 && x < modelWidth && y >= 0 && y < modelHeight) {
      return ui.Offset(x.floor().toDouble(), y.floor().toDouble());
    }
    return null;
  }

  void dispose() {
    _interpreter?.close();
    _isInitialized = false;
    _instance = null;
  }
}
