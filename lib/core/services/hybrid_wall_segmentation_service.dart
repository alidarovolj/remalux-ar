import 'dart:typed_data';
import 'package:camera/camera.dart';
import 'package:flutter/foundation.dart';
import 'cv_wall_painter_service.dart';
import 'roboflow_wall_segmentation_service.dart';
import 'performance_profiler.dart';
import 'device_capability_detector.dart';

/// –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
enum SegmentationMode {
  localOnly, // –¢–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
  roboflowOnly, // –¢–æ–ª—å–∫–æ Roboflow API
  hybrid, // –ì–∏–±—Ä–∏–¥–Ω—ã–π - API –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞, –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
  adaptive, // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π - –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ª–æ–≤–∏–π
}

/// –ì–∏–±—Ä–∏–¥–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å—Ç–µ–Ω
class HybridWallSegmentationService {
  static final HybridWallSegmentationService _instance =
      HybridWallSegmentationService._internal();
  factory HybridWallSegmentationService() => _instance;
  HybridWallSegmentationService._internal();

  final CVWallPainterService _localService = CVWallPainterService.instance;
  final RoboflowWallSegmentationService _roboflowService =
      RoboflowWallSegmentationService();
  final PerformanceProfiler _profiler = PerformanceProfiler();
  final DeviceCapabilityDetector _deviceDetector = DeviceCapabilityDetector();

  SegmentationMode _currentMode = SegmentationMode.adaptive;
  bool _isInitialized = false;

  // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  int _consecutiveApiFailures = 0;
  double _averageApiLatency = 0.0;
  double _averageLocalLatency = 0.0;
  bool _isNetworkAvailable = true;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      debugPrint('üöÄ Initializing Hybrid Wall Segmentation Service...');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
      await _localService.initialize();

      // –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Roboflow API
      try {
        await _roboflowService.initialize();
        debugPrint('‚úÖ Roboflow API available');
      } catch (e) {
        debugPrint('‚ö†Ô∏è Roboflow API unavailable, will use local only: $e');
        _currentMode = SegmentationMode.localOnly;
      }

      _isInitialized = true;
      debugPrint('‚úÖ Hybrid service initialized successfully');
    } catch (e) {
      debugPrint('‚ùå Failed to initialize hybrid service: $e');
      rethrow;
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞
  Future<HybridSegmentationResult?> processFrame(
      CameraImage cameraImage) async {
    if (!_isInitialized) {
      await initialize();
    }

    return await _profiler.profileOperation('hybrid_segmentation', () async {
      final selectedMode = await _selectOptimalMode();

      switch (selectedMode) {
        case SegmentationMode.localOnly:
          return await _processWithLocal(cameraImage);

        case SegmentationMode.roboflowOnly:
          return await _processWithRoboflow(cameraImage);

        case SegmentationMode.hybrid:
          return await _processHybrid(cameraImage);

        case SegmentationMode.adaptive:
          return await _processAdaptive(cameraImage);
      }
    });
  }

  /// –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  Future<SegmentationMode> _selectOptimalMode() async {
    // –ï—Å–ª–∏ —Å–µ—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if (_currentMode == SegmentationMode.localOnly) {
      return SegmentationMode.localOnly;
    }

    // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ API
    if (_consecutiveApiFailures > 3) {
      debugPrint('üîÑ Switching to local due to API failures');
      return SegmentationMode.localOnly;
    }

    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    final deviceCapabilities = await _deviceDetector.getDeviceCapabilities();

    // –ù–∞ –º–æ—â–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º
    if (deviceCapabilities.performanceTier == DevicePerformanceTier.highEnd) {
      return SegmentationMode.hybrid;
    }

    // –ù–∞ —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–º –º–æ–¥–µ–ª—è–º
    if (deviceCapabilities.performanceTier == DevicePerformanceTier.lowEnd) {
      return SegmentationMode.localOnly;
    }

    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–µ—Ä–∂–∫–∏
    if (_averageApiLatency > 0 && _averageLocalLatency > 0) {
      // –ï—Å–ª–∏ API –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
      if (_averageApiLatency > _averageLocalLatency * 3) {
        return SegmentationMode.localOnly;
      }

      // –ï—Å–ª–∏ API –±—ã—Å—Ç—Ä–µ–µ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ
      if (_averageApiLatency < _averageLocalLatency * 1.5) {
        return SegmentationMode.roboflowOnly;
      }
    }

    return SegmentationMode.adaptive;
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
  Future<HybridSegmentationResult> _processWithLocal(
      CameraImage cameraImage) async {
    try {
      final stopwatch = Stopwatch()..start();

      final didStart = _localService.processCameraFrame(cameraImage);

      if (didStart) {
        // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        await Future.delayed(
            const Duration(milliseconds: 50)); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        final lastResult = _localService.lastResult;

        stopwatch.stop();
        _updateLocalLatency(stopwatch.elapsedMilliseconds.toDouble());

        return HybridSegmentationResult(
          mask: lastResult?.segmentationMask,
          confidence: 0.8, // –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–º–µ—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
          source: SegmentationSource.local,
          processingTimeMs: stopwatch.elapsedMilliseconds,
          originalWidth: cameraImage.width,
          originalHeight: cameraImage.height,
        );
      } else {
        stopwatch.stop();
        return HybridSegmentationResult.empty(
            cameraImage.width, cameraImage.height);
      }
    } catch (e) {
      debugPrint('‚ùå Local processing failed: $e');
      return HybridSegmentationResult.empty(
          cameraImage.width, cameraImage.height);
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Roboflow API
  Future<HybridSegmentationResult> _processWithRoboflow(
      CameraImage cameraImage) async {
    try {
      final stopwatch = Stopwatch()..start();

      final result = await _roboflowService.processFrame(cameraImage);

      stopwatch.stop();

      if (result != null) {
        _updateApiLatency(stopwatch.elapsedMilliseconds.toDouble());
        _consecutiveApiFailures = 0; // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫

        return HybridSegmentationResult(
          mask: result.mask,
          confidence: result.confidence,
          source: SegmentationSource.roboflow,
          processingTimeMs: stopwatch.elapsedMilliseconds,
          originalWidth: result.originalWidth,
          originalHeight: result.originalHeight,
          segmentCount: result.segmentCount,
        );
      } else {
        throw Exception('Roboflow API returned null result');
      }
    } catch (e) {
      debugPrint('‚ùå Roboflow processing failed: $e');
      _consecutiveApiFailures++;

      // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
      return await _processWithLocal(cameraImage);
    }
  }

  /// –ì–∏–±—Ä–∏–¥–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  Future<HybridSegmentationResult> _processHybrid(
      CameraImage cameraImage) async {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    final futures = await Future.wait([
      _processWithLocal(cameraImage),
      _processWithRoboflow(cameraImage),
    ]);

    final localResult = futures[0];
    final apiResult = futures[1];

    // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (apiResult.source == SegmentationSource.roboflow &&
        apiResult.confidence > 0.7) {
      return apiResult; // API —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π
    } else {
      return localResult; // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π
    }
  }

  /// –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º
  Future<HybridSegmentationResult> _processAdaptive(
      CameraImage cameraImage) async {
    // –õ–æ–≥–∏–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    final now = DateTime.now();

    // –í –ø–µ—Ä–≤—ã–µ 10 —Å–µ–∫—É–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    if (_averageApiLatency == 0.0) {
      return await _processWithRoboflow(cameraImage);
    }

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
    if (now.second % 30 == 0) {
      // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
      return await _processWithRoboflow(cameraImage);
    }

    // –û–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥
    if (_averageApiLatency < _averageLocalLatency) {
      return await _processWithRoboflow(cameraImage);
    } else {
      return await _processWithLocal(cameraImage);
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ API
  void _updateApiLatency(double latency) {
    if (_averageApiLatency == 0.0) {
      _averageApiLatency = latency;
    } else {
      _averageApiLatency = (_averageApiLatency * 0.7) + (latency * 0.3);
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
  void _updateLocalLatency(double latency) {
    if (_averageLocalLatency == 0.0) {
      _averageLocalLatency = latency;
    } else {
      _averageLocalLatency = (_averageLocalLatency * 0.7) + (latency * 0.3);
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
  void setMode(SegmentationMode mode) {
    _currentMode = mode;
    debugPrint('üîÑ Segmentation mode changed to: ${mode.name}');
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
  SegmentationMode get currentMode => _currentMode;

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  Map<String, dynamic> getPerformanceStats() => {
        'currentMode': _currentMode.name,
        'averageApiLatency': _averageApiLatency,
        'averageLocalLatency': _averageLocalLatency,
        'consecutiveApiFailures': _consecutiveApiFailures,
        'isNetworkAvailable': _isNetworkAvailable,
        'isInitialized': _isInitialized,
      };

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
  bool get isInitialized => _isInitialized;

  /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    _localService.dispose();
    _roboflowService.dispose();
    _isInitialized = false;
    debugPrint('üßπ Hybrid service disposed');
  }
}

/// –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
enum SegmentationSource {
  local, // –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
  roboflow, // Roboflow API
  hybrid, // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
class HybridSegmentationResult {
  final Uint8List? mask;
  final double confidence;
  final SegmentationSource source;
  final int processingTimeMs;
  final int originalWidth;
  final int originalHeight;
  final int? segmentCount;

  HybridSegmentationResult({
    required this.mask,
    required this.confidence,
    required this.source,
    required this.processingTimeMs,
    required this.originalWidth,
    required this.originalHeight,
    this.segmentCount,
  });

  /// –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  factory HybridSegmentationResult.empty(int width, int height) {
    return HybridSegmentationResult(
      mask: null,
      confidence: 0.0,
      source: SegmentationSource.local,
      processingTimeMs: 0,
      originalWidth: width,
      originalHeight: height,
    );
  }

  /// –ï—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω–∞—è –º–∞—Å–∫–∞
  bool get hasValidMask => mask != null && mask!.isNotEmpty;

  Map<String, dynamic> toJson() => {
        'confidence': confidence,
        'source': source.name,
        'processingTimeMs': processingTimeMs,
        'originalWidth': originalWidth,
        'originalHeight': originalHeight,
        'segmentCount': segmentCount,
        'hasValidMask': hasValidMask,
      };
}
