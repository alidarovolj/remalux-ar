import 'dart:async';
import 'dart:isolate';
import 'dart:typed_data';
import 'dart:ui' as ui;
import 'dart:io';
import 'package:camera/camera.dart';
import 'package:flutter/foundation.dart';
import 'package:image/image.dart' as img;
import 'package:tflite_flutter/tflite_flutter.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è AI —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å—Ç–µ–Ω, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∏–∑–æ–ª—è—Ç–µ
/// –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI –ø–æ—Ç–æ–∫–∞
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SegFormer –º–æ–¥–µ–ª—å –¥–ª—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å—Ç–µ–Ω
class SegmentationService {
  static SegmentationService? _instance;
  static SegmentationService get instance =>
      _instance ??= SegmentationService._internal();

  SegmentationService._internal();

  // –ò–∑–æ–ª—è—Ç –¥–ª—è AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
  Isolate? _isolate;
  SendPort? _sendPort;
  ReceivePort? _receivePort;

  // –ú–æ–¥–µ–ª—å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
  IsolateInterpreter? _isolateInterpreter;
  Interpreter? _interpreter;
  bool _isInitialized = false;

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ SegFormer
  List<int>? _inputShape; // [1, 224, 224, 3] –¥–ª—è segformer.tflite
  List<int>? _outputShape; // [1, 224, 224, 1] - –±–∏–Ω–∞—Ä–Ω–∞—è –º–∞—Å–∫–∞ —Å—Ç–µ–Ω
  TensorType? _inputType;
  TensorType? _outputType;

  // –ö–æ–ª–±—ç–∫ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  Function(ui.Path wallMask)? _onSegmentationResult;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π SegFormer –º–æ–¥–µ–ª–∏
  Future<bool> initialize({
    String modelPath = 'assets/ml/segformer.tflite',
    Function(ui.Path)? onSegmentationResult,
  }) async {
    if (_isInitialized) return true;

    try {
      print("ü§ñ SegmentationService: –ó–∞–≥—Ä—É–∂–∞–µ–º SegFormer –º–æ–¥–µ–ª—å $modelPath");

      _onSegmentationResult = onSegmentationResult;

      // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–µ—Ä
      final interpreterOptions = InterpreterOptions();

      // –í–∫–ª—é—á–∞–µ–º GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      try {
        if (Platform.isAndroid || Platform.isIOS) {
          final gpuDelegate = GpuDelegate();
          interpreterOptions.addDelegate(gpuDelegate);
          print(
              "üì± GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è ${Platform.isAndroid ? 'Android' : 'iOS'}");
        }
      } catch (e) {
        print("‚ö†Ô∏è GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU: $e");
      }

      _interpreter =
          await Interpreter.fromAsset(modelPath, options: interpreterOptions);
      _interpreter!.allocateTensors();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ SegFormer –º–æ–¥–µ–ª–∏
      final inputTensor = _interpreter!.getInputTensor(0);
      final outputTensor = _interpreter!.getOutputTensor(0);

      _inputShape = inputTensor.shape;
      _inputType = inputTensor.type;
      _outputShape = outputTensor.shape;
      _outputType = outputTensor.type;

      print('üß† SegFormer Input: $_inputShape, Type: $_inputType');
      print('üß† SegFormer Output: $_outputShape, Type: $_outputType');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è SegFormer –º–æ–¥–µ–ª—å
      if (_inputShape!.length == 4 &&
          _inputShape![1] == 224 &&
          _inputShape![2] == 224 &&
          _inputShape![3] == 3 &&
          _outputShape!.length == 4 &&
          _outputShape![1] == 224 &&
          _outputShape![2] == 224 &&
          _outputShape![3] == 1) {
        print(
            '‚úÖ SegFormer –º–æ–¥–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: input 224x224x3 ‚Üí output 224x224x1');
      } else {
        print('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
      }

      // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–ª—è—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–µ—Ä
      _isolateInterpreter =
          await IsolateInterpreter.create(address: _interpreter!.address);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–ª—è—Ç
      await _initializeIsolate();

      _isInitialized = true;
      print('‚úÖ SegmentationService —Å SegFormer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–æ–≤–∞–Ω');
      return true;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SegmentationService: $e');
      return false;
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–æ–ª—è—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  Future<void> _initializeIsolate() async {
    _receivePort = ReceivePort();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–∑–æ–ª—è—Ç
    _isolate = await Isolate.spawn(
      _isolateEntryPoint,
      _receivePort!.sendPort,
    );

    // –ü–æ–ª—É—á–∞–µ–º SendPort –æ—Ç –∏–∑–æ–ª—è—Ç–∞
    final completer = Completer<SendPort>();
    _receivePort!.listen((message) {
      if (message is SendPort) {
        completer.complete(message);
      } else if (message is SegmentationResult) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        _handleSegmentationResult(message);
      }
    });

    _sendPort = await completer.future;
  }

  /// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∏–∑–æ–ª—è—Ç–∞
  static void _isolateEntryPoint(SendPort mainSendPort) {
    final isolateReceivePort = ReceivePort();
    mainSendPort.send(isolateReceivePort.sendPort);

    isolateReceivePort.listen((message) async {
      if (message is SegmentationRequest) {
        try {
          final result = await _processSegmentationInIsolate(message);
          mainSendPort.send(result);
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ –≤ –∏–∑–æ–ª—è—Ç–µ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: $e');
        }
      }
    });
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ SegFormer –≤ –∏–∑–æ–ª—è—Ç–µ
  static Future<SegmentationResult> _processSegmentationInIsolate(
    SegmentationRequest request,
  ) async {
    final stopwatch = Stopwatch()..start();

    try {
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±–∞–π—Ç–æ–≤
      final decodedImage = img.decodeImage(request.imageBytes);
      if (decodedImage == null) {
        throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      }

      // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–¥ SegFormer: 224x224
      final resizedImage = img.copyResize(
        decodedImage,
        width: 224,
        height: 224,
        interpolation: img.Interpolation.cubic,
      );

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è SegFormer
      // SegFormer –æ–∂–∏–¥–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è [0, 1]
      final inputData = Float32List(1 * 224 * 224 * 3);
      var index = 0;

      for (int y = 0; y < 224; y++) {
        for (int x = 0; x < 224; x++) {
          final pixel = resizedImage.getPixel(x, y);
          // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º RGB –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [0, 1]
          inputData[index++] = pixel.r / 255.0; // R
          inputData[index++] = pixel.g / 255.0; // G
          inputData[index++] = pixel.b / 255.0; // B
        }
      }

      // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ç–µ–Ω–∑–æ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      final output = [Float32List(1 * 224 * 224 * 1)];

      // TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å _isolateInterpreter –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
      // –ü–æ–∫–∞ —á—Ç–æ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –º–∞—Å–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      // final input = [inputData.reshape([1, 224, 224, 3])];
      // _isolateInterpreter.run(input, output);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ SegFormer –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—ã–µ (–Ω–µ UI –æ–±—ä–µ–∫—Ç—ã)
      // SegFormer –≤—ã–¥–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1] –≥–¥–µ >0.5 = —Å—Ç–µ–Ω–∞
      final wallRects = _extractWallRectsFromSegmentation(
          output[0], 224, 224, request.screenWidth, request.screenHeight);

      stopwatch.stop();

      return SegmentationResult(
        wallRects: wallRects,
        confidence: 0.85, // –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è SegFormer
        processingTimeMs: stopwatch.elapsedMilliseconds,
      );
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SegFormer –≤ –∏–∑–æ–ª—è—Ç–µ: $e');
      stopwatch.stop();

      return SegmentationResult(
        wallRects: [],
        confidence: 0.0,
        processingTimeMs: stopwatch.elapsedMilliseconds,
      );
    }
  }

  /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ —Å—Ç–µ–Ω –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ SegFormer (–±–µ–∑ UI –æ–ø–µ—Ä–∞—Ü–∏–π)
  static List<WallRect> _extractWallRectsFromSegmentation(
    Float32List segmentationOutput,
    int modelWidth,
    int modelHeight,
    double screenWidth,
    double screenHeight,
  ) {
    final wallRects = <WallRect>[];

    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    final scaleX = screenWidth / modelWidth;
    final scaleY = screenHeight / modelHeight;

    // –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–µ–Ω—ã (SegFormer –≤—ã–¥–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è [0, 1])
    const wallThreshold = 0.5;

    // –ò—â–µ–º –æ–±–ª–∞—Å—Ç–∏ —Å—Ç–µ–Ω –∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏
    for (int y = 0; y < modelHeight; y++) {
      for (int x = 0; x < modelWidth; x++) {
        final index = y * modelWidth + x;
        final wallProbability = segmentationOutput[index];

        if (wallProbability > wallThreshold) {
          // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω
          final screenX = x * scaleX;
          final screenY = y * scaleY;

          // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –ø–∏–∫—Å–µ–ª—è —Å—Ç–µ–Ω—ã
          wallRects.add(WallRect(
            x: screenX,
            y: screenY,
            width: scaleX,
            height: scaleY,
          ));
        }
      }
    }

    return wallRects;
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
  void _handleSegmentationResult(SegmentationResult result) {
    if (_onSegmentationResult != null) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –≤ UI.Path –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
      final wallMask = _createWallPathFromRects(result.wallRects);
      _onSegmentationResult!(wallMask);
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ UI.Path –∏–∑ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ (–≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
  ui.Path _createWallPathFromRects(List<WallRect> wallRects) {
    final wallMask = ui.Path();

    for (final rect in wallRects) {
      wallMask.addRect(ui.Rect.fromLTWH(
        rect.x,
        rect.y,
        rect.width,
        rect.height,
      ));
    }

    return wallMask;
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞ —Å –∫–∞–º–µ—Ä—ã
  Future<void> processFrame(
    CameraImage cameraImage,
    double screenWidth,
    double screenHeight,
  ) async {
    if (!_isInitialized || _sendPort == null) return;

    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      final convertedImage = _convertCameraImage(cameraImage);
      if (convertedImage == null) return;

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
      final request = SegmentationRequest(
        imageBytes: img.encodePng(convertedImage),
        screenWidth: screenWidth,
        screenHeight: screenHeight,
        inputShape: _inputShape!,
        outputShape: _outputShape!,
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∏–∑–æ–ª—è—Ç
      _sendPort!.send(request);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–∞: $e');
    }
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è CameraImage
  img.Image? _convertCameraImage(CameraImage cameraImage) {
    try {
      if (cameraImage.format.group == ImageFormatGroup.bgra8888) {
        return img.Image.fromBytes(
          width: cameraImage.planes[0].width!,
          height: cameraImage.planes[0].height!,
          bytes: cameraImage.planes[0].bytes.buffer,
          order: img.ChannelOrder.bgra,
        );
      } else {
        // YUV420 to RGB –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        final int width = cameraImage.width;
        final int height = cameraImage.height;
        final image = img.Image(width: width, height: height);
        final plane0 = cameraImage.planes[0].bytes;
        final plane1 = cameraImage.planes[1].bytes;
        final plane2 = cameraImage.planes[2].bytes;
        final rowStride0 = cameraImage.planes[0].bytesPerRow;
        final pixelStride1 = cameraImage.planes[1].bytesPerPixel!;
        final rowStride1 = cameraImage.planes[1].bytesPerRow;
        final pixelStride2 = cameraImage.planes[2].bytesPerPixel!;
        final rowStride2 = cameraImage.planes[2].bytesPerRow;

        for (int y = 0; y < height; ++y) {
          for (int x = 0; x < width; ++x) {
            final int Y = plane0[y * rowStride0 + x];
            final int U =
                plane1[(y ~/ 2) * rowStride1 + (x ~/ 2) * pixelStride1];
            final int V =
                plane2[(y ~/ 2) * rowStride2 + (x ~/ 2) * pixelStride2];

            final int R = (Y + 1.402 * (V - 128)).round().clamp(0, 255);
            final int G = (Y - 0.344136 * (U - 128) - 0.714136 * (V - 128))
                .round()
                .clamp(0, 255);
            final int B = (Y + 1.772 * (U - 128)).round().clamp(0, 255);
            image.setPixelRgb(x, y, R, G, B);
          }
        }
        return image;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $e');
      return null;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –Ω–∞ —Å—Ç–µ–Ω–µ
  bool isPointOnWall(ui.Offset point, ui.Path? wallMask) {
    if (wallMask == null) return false;
    return wallMask.contains(point);
  }

  /// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  Future<void> dispose() async {
    print('üßπ SegmentationService: –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤');

    _isolate?.kill();
    _isolate = null;

    _receivePort?.close();
    _receivePort = null;

    _sendPort = null;

    await _isolateInterpreter?.close();
    _isolateInterpreter = null;

    _interpreter?.close();
    _interpreter = null;

    _isInitialized = false;
  }
}

/// –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∏–∑–æ–ª—è—Ç–∞
class SegmentationRequest {
  final Uint8List imageBytes;
  final double screenWidth;
  final double screenHeight;
  final List<int> inputShape;
  final List<int> outputShape;

  SegmentationRequest({
    required this.imageBytes,
    required this.screenWidth,
    required this.screenHeight,
    required this.inputShape,
    required this.outputShape,
  });
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –æ—Ç –∏–∑–æ–ª—è—Ç–∞
class SegmentationResult {
  final List<WallRect> wallRects;
  final double confidence;
  final int processingTimeMs;

  SegmentationResult({
    required this.wallRects,
    required this.confidence,
    required this.processingTimeMs,
  });
}

/// –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å—Ç–µ–Ω—ã (–±–µ–∑ UI –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
class WallRect {
  final double x;
  final double y;
  final double width;
  final double height;

  WallRect({
    required this.x,
    required this.y,
    required this.width,
    required this.height,
  });
}
