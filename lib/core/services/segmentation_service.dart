/*
import 'dart:async';
import 'dart:isolate';
import 'dart:typed_data';
import 'dart:ui' as ui;

import 'package:camera/camera.dart';
import 'package:flutter/foundation.dart';
import 'package:image/image.dart' as img;
import 'package:tflite_flutter/tflite_flutter.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è AI —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å—Ç–µ–Ω.
/// –≠—Ç–∞ –≤–µ—Ä—Å–∏—è –±—ã–ª–∞ —É–ø—Ä–æ—â–µ–Ω–∞ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
/// –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
class SegmentationService {
  static SegmentationService? _instance;
  static SegmentationService get instance =>
      _instance ??= SegmentationService._internal();

  SegmentationService._internal();

  // –ú–æ–¥–µ–ª—å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
  Interpreter? _interpreter;
  bool _isInitialized = false;

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
  List<int>? _inputShape;
  List<int>? _outputShape;
  TfLiteType? _inputType;
  TfLiteType? _outputType;

  // Callback –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  Function(ui.Image? overlayImage)? _onSegmentationResult;

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
  bool _isProcessing = false;

  Future<bool> initialize({
    String modelPath = 'assets/ml/segformer.tflite',
    Function(ui.Image? overlayImage)? onSegmentationResult,
  }) async {
    if (_isInitialized) return true;

    try {
      debugPrint("ü§ñ SegmentationService: –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ $modelPath");

      _onSegmentationResult = onSegmentationResult;

      final interpreterOptions = InterpreterOptions();
      _interpreter =
          await Interpreter.fromAsset(modelPath, options: interpreterOptions);
      _interpreter!.allocateTensors();

      final inputTensor = _interpreter!.getInputTensor(0);
      final outputTensor = _interpreter!.getOutputTensor(0);

      _inputShape = inputTensor.shape;
      _inputType = inputTensor.type;
      _outputShape = outputTensor.shape;
      _outputType = outputTensor.type;

      debugPrint('‚úÖ SegmentationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      debugPrint('   - Input Shape: $_inputShape, Type: $_inputType');
      debugPrint('   - Output Shape: $_outputShape, Type: $_outputType');

      _isInitialized = true;
      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SegmentationService: $e');
      return false;
    }
  }

  Future<void> processFrame(CameraImage cameraImage) async {
    if (!_isInitialized || _isProcessing) return;

    _isProcessing = true;

    try {
      final stopwatch = Stopwatch()..start();

      // 1. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–∞–º–µ—Ä—ã
      final inputImage = _convertCameraImage(cameraImage);
      if (inputImage == null) return;

      // 2. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–Ω–∑–æ—Ä–∞
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –º–æ–¥–µ–ª—å Segformer –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ 224x224
      final inputTensor =
          _preprocessImage(inputImage, _inputShape![1], _inputShape![2]);

      // 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–Ω–∑–æ—Ä–∞
      final outputBuffer =
          List.filled(_outputShape!.reduce((a, b) => a * b), 0.0)
              .reshape(_outputShape!);
      final outputs = <int, Object>{0: outputBuffer};

      // 4. –ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏
      _interpreter!.runForMultipleInputs([inputTensor], outputs);

      // 5. –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
      final segmentationMask = _postProcessOutput(outputBuffer);

      stopwatch.stop();
      debugPrint(
          "‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: ${stopwatch.elapsedMilliseconds}ms");

      // 6. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è –∏–∑ –º–∞—Å–∫–∏
      if (_onSegmentationResult != null) {
        final overlay = await _createOverlayFromMask(
            segmentationMask, _outputShape![2], _outputShape![1]);
        _onSegmentationResult!(overlay);
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–¥—Ä–∞ –≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: $e');
      _onSegmentationResult?.call(null);
    } finally {
      _isProcessing = false;
    }
  }

  /// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏.
  Float32List _preprocessImage(
      img.Image image, int targetWidth, int targetHeight) {
    final resizedImage = img.copyResize(
      image,
      width: targetWidth,
      height: targetHeight,
      interpolation: img.Interpolation.cubic,
    );

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–∏–∫—Å–µ–ª–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [-1, 1], –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç SegFormer
    final imageBytes = resizedImage.getBytes(order: img.ChannelOrder.rgb);
    final floatBytes = Float32List(targetWidth * targetHeight * 3);
    for (int i = 0; i < imageBytes.length; i++) {
      floatBytes[i] = (imageBytes[i] / 127.5) - 1.0;
    }

    return floatBytes;
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ 2D –º–∞—Å–∫—É —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.
  Uint8List _postProcessOutput(List<dynamic> output) {
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤—ã—Ö–æ–¥ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º—É [1, –≤—ã—Å–æ—Ç–∞, —à–∏—Ä–∏–Ω–∞, 1]
    // –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ü–µ–Ω–∫–∏ –∫–ª–∞—Å—Å–æ–≤.
    final reshapedOutput = output[0] as List<List<List<double>>>;
    final height = reshapedOutput.length;
    final width = reshapedOutput[0].length;

    final mask = Uint8List(width * height);
    for (int y = 0; y < height; y++) {
      for (int x = 0; x < width; x++) {
        // –î–ª—è Segformer –∑–Ω–∞—á–µ–Ω–∏–µ > 0 —á–∞—Å—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –∫–ª–∞—Å—Å (—Å—Ç–µ–Ω–∞)
        if (reshapedOutput[y][x][0] > 0.0) {
          mask[y * width + x] = 1; // –ö–ª–∞—Å—Å 1 –¥–ª—è –°—Ç–µ–Ω—ã
        } else {
          mask[y * width + x] = 0; // –ö–ª–∞—Å—Å 0 –¥–ª—è –§–æ–Ω–∞
        }
      }
    }
    return mask;
  }

  Future<ui.Image> _createOverlayFromMask(
      Uint8List mask, int width, int height) async {
    final completer = Completer<ui.Image>();
    final color =
        ui.Color.fromARGB(128, 255, 0, 0); // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è —Å—Ç–µ–Ω

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Isolate.run –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    final pngBytes = await Isolate.run(() {
      final image = img.Image(width: width, height: height, numChannels: 4);
      for (int i = 0; i < mask.length; i++) {
        if (mask[i] == 1) {
          // –ï—Å–ª–∏ –ø–∏–∫—Å–µ–ª—å - —ç—Ç–æ —Å—Ç–µ–Ω–∞
          final index = i;
          final x = index % width;
          final y = index ~/ width;
          image.setPixelRgba(x, y, color.red, color.green, color.blue, color.alpha);
        }
      }
      return img.encodePng(image);
    });

    ui.instantiateImageCodec(Uint8List.fromList(pngBytes)).then((codec) {
      codec.getNextFrame().then((frame) => completer.complete(frame.image));
    });

    return completer.future;
  }

  img.Image? _convertCameraImage(CameraImage cameraImage) {
    // –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–¥–µ–∂–Ω–æ–π.
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç BGRA –Ω–∞ iOS/macOS.
    if (cameraImage.format.group == ImageFormatGroup.bgra8888) {
      return img.Image.fromBytes(
        width: cameraImage.width,
        height: cameraImage.height,
        bytes: cameraImage.planes[0].bytes.buffer,
        order: img.ChannelOrder.bgra,
      );
    }
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∏–∑ YUV420 –¥–ª—è Android, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è.
    debugPrint("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${cameraImage.format.group}");
    return null; // –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
  }

  void dispose() {
    _interpreter?.close();
    _isInitialized = false;
    debugPrint("ü§ñ SegmentationService –≤—ã–≥—Ä—É–∂–µ–Ω.");
  }
}
*/
