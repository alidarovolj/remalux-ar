import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:remalux_ar/features/checkout/domain/models/delivery_type.dart';
import 'package:remalux_ar/features/checkout/domain/models/payment_method.dart';
import 'package:remalux_ar/features/recipients/domain/models/recipient.dart';
import 'package:remalux_ar/core/services/api_client.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:remalux_ar/features/cart/domain/providers/cart_providers.dart';
import 'package:dio/dio.dart';
import 'dart:convert';
import 'package:remalux_ar/core/config/app_config.dart';
import 'package:remalux_ar/core/services/storage_service.dart';

final deliveryTypesProvider = FutureProvider<List<DeliveryType>>((ref) async {
  try {
    // TODO: Replace with actual API call
    await Future.delayed(const Duration(seconds: 1));
    return [
      DeliveryType.fromJson({
        'id': 1,
        'title': {'ru': '–î–æ—Å—Ç–∞–≤–∫–∞', 'en': 'Delivery', 'kz': '–ñ–µ—Ç–∫—ñ–∑—É'}
      }),
      DeliveryType.fromJson({
        'id': 2,
        'title': {'ru': '–°–∞–º–æ–≤—ã–≤–æ–∑', 'en': 'Pickup', 'kz': '”®–∑—ñ –∞–ª—ã–ø –∫–µ—Ç—É'}
      }),
    ];
  } catch (e) {
    throw Exception('Failed to load delivery types');
  }
});

final selectedDeliveryTypeProvider = StateProvider<DeliveryType?>((ref) {
  // Set delivery (id: 1) as default
  final deliveryTypes = ref.watch(deliveryTypesProvider);
  return deliveryTypes.whenOrNull(
    data: (types) => types.firstWhere((type) => type.id == 1),
  );
});

final paymentMethodsProvider = FutureProvider<List<PaymentMethod>>((ref) async {
  try {
    // TODO: Replace with actual API call
    await Future.delayed(const Duration(seconds: 1));
    return [
      PaymentMethod.fromJson({
        'id': 1,
        'title': {'ru': '–ù–∞–ª–∏—á–Ω—ã–º–∏', 'en': 'Cash', 'kz': '“ö–æ–ª–º–∞-“õ–æ–ª'}
      }),
      PaymentMethod.fromJson({
        'id': 2,
        'title': {'ru': '–ö–∞—Ä—Ç–æ–π', 'en': 'Card', 'kz': '–ö–∞—Ä—Ç–∞–º–µ–Ω'}
      }),
      PaymentMethod.fromJson({
        'id': 3,
        'title': {'ru': 'Kaspi', 'en': 'Kaspi', 'kz': 'Kaspi'}
      }),
    ];
  } catch (e) {
    throw Exception('Failed to load payment methods');
  }
});

// Selected payment method
final selectedPaymentMethodProvider =
    StateProvider<PaymentMethod?>((ref) => null);

// Selected address
final selectedAddressIdProvider = StateProvider<String?>((ref) => null);

// Selected delivery time
final selectedDeliveryTimeProvider = StateProvider<DateTime?>((ref) => null);

// Selected recipient
final selectedRecipientProvider = StateProvider<Recipient?>((ref) => null);

final orderCommentProvider = StateProvider<String>((ref) => '');

final isOnlinePaymentProvider = StateProvider<bool>((ref) => true);

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —É—Å–ª–æ–≤–∏–π —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
final termsAcceptedProvider = StateProvider<bool>((ref) => false);

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏
final validationErrorProvider = StateProvider<String?>((ref) => null);

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
final orderProvider =
    StateNotifierProvider<OrderNotifier, AsyncValue<int?>>((ref) {
  final apiClient = ref.watch(apiClientProvider);
  return OrderNotifier(apiClient, ref);
});

class OrderNotifier extends StateNotifier<AsyncValue<int?>> {
  final ApiClient _apiClient;
  final Ref _ref;

  OrderNotifier(this._apiClient, this._ref)
      : super(const AsyncValue.data(null));

  Future<bool> validateOrderData() {
    final isDelivery = _ref.read(selectedDeliveryTypeProvider)?.id == 1;
    final selectedAddressId = _ref.read(selectedAddressIdProvider);
    final selectedDeliveryTime = _ref.read(selectedDeliveryTimeProvider);
    final selectedRecipient = _ref.read(selectedRecipientProvider);

    if (isDelivery) {
      // –ü—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã: –∞–¥—Ä–µ—Å, –≤—Ä–µ–º—è, –ø–æ–ª—É—á–∞—Ç–µ–ª—å
      if (selectedAddressId == null || selectedAddressId.isEmpty) {
        _ref.read(validationErrorProvider.notifier).state =
            'checkout.validation.address_required'.tr();
        return Future.value(false);
      }

      if (selectedDeliveryTime == null) {
        _ref.read(validationErrorProvider.notifier).state =
            'checkout.validation.delivery_time_required'.tr();
        return Future.value(false);
      }
    }

    // –ü–æ–ª—É—á–∞—Ç–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –≤—Å–µ–≥–¥–∞ (–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ, –∏ –ø—Ä–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–µ)
    if (selectedRecipient == null) {
      _ref.read(validationErrorProvider.notifier).state =
          'checkout.validation.recipient_required'.tr();
      return Future.value(false);
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    _ref.read(validationErrorProvider.notifier).state = null;
    return Future.value(true);
  }

  Future<void> createOrder(String note) async {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    final isValid = await validateOrderData();
    if (!isValid) {
      return;
    }

    try {
      state = const AsyncValue.loading();

      final cartItems = _ref.read(cartItemsProvider);
      final selectedDeliveryType = _ref.read(selectedDeliveryTypeProvider);
      final isOnlinePayment = _ref.read(isOnlinePaymentProvider);
      final selectedAddressId = _ref.read(selectedAddressIdProvider);
      final selectedRecipient = _ref.read(selectedRecipientProvider);
      final selectedDeliveryTime = _ref.read(selectedDeliveryTimeProvider);
      final cartSummary = _ref.read(cartSummaryProvider);

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      final productVariants = cartItems
          .map((item) => {
                "product_variant_id": item.productVariant.id,
                "quantity": item.quantity,
                "price": item.productVariant.price.toString(),
                "color_id": item.colorId != null ? item.colorId!['id'] : null
              })
          .toList();

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 - –æ–Ω–ª–∞–π–Ω, 2 - –Ω–∞–ª–∏—á–Ω—ã–º–∏)
      final paymentMethodId = isOnlinePayment ? 1 : 2;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
      final Map<String, dynamic> requestBody = {
        "product_variants": productVariants,
        "delivery_address_id": selectedDeliveryType?.id == 1
            ? int.parse(selectedAddressId!)
            : null,
        "recipient_id": selectedRecipient?.id,
        "note": note.isNotEmpty ? note : null,
        "delivery_type_id": selectedDeliveryType?.id,
        "payment_method_id": paymentMethodId,
        "total_amount": cartSummary.finalAmount.toInt(),
        "agreement": true,
        "delivery_date":
            selectedDeliveryType?.id == 1 && selectedDeliveryTime != null
                ? selectedDeliveryTime.toIso8601String()
                : null,
      };

      print('üì¶ Sending order request: $requestBody');

      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        final token = await StorageService.getToken();

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä—è–º–æ–π –ø–æ–¥—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É
        final dio = Dio(BaseOptions(
          baseUrl: AppConfig.apiUrl,
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Authorization': 'Bearer $token',
          },
        ));

        print('üì¶ Token for request: ${token?.substring(0, 10)}...');
        print('üì¶ Request URL: ${AppConfig.apiUrl}/orders');
        print('üì¶ Request method: POST');
        print('üì¶ Request headers: ${dio.options.headers}');
        print('üì¶ Request body (stringified): ${jsonEncode(requestBody)}');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É JSON
        final response = await dio.post(
          '/orders',
          data: requestBody, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ Map, –±–µ–∑ —Ä—É—á–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
          options: Options(
            validateStatus: (status) => true, // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å
            contentType: 'application/json',
            responseType: ResponseType.plain, // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç
          ),
        );

        print('üì¶ Response status code: ${response.statusCode}');
        print('üì¶ Response headers: ${response.headers}');
        print('üì¶ Raw response data type: ${response.data.runtimeType}');
        print('üì¶ Raw response data: ${response.data}');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        if (response.data is String &&
            response.data.toString().contains('Array to string conversion')) {
          final jsonStr = response.data
              .toString()
              .replaceFirst('Array to string conversion', '');
          print('üì¶ JSON string after prefix removal: $jsonStr');
          try {
            final Map<String, dynamic> jsonData = jsonDecode(jsonStr);
            print('üì¶ Parsed JSON: $jsonData');
            final orderId = jsonData['order_id'];
            print('‚úÖ Order created successfully. Order ID: $orderId');
            state = AsyncValue.data(orderId);
            return;
          } catch (e) {
            print('‚ùå Failed to parse response: $e');
            throw Exception('Failed to parse response: $e');
          }
        } else if (response.statusCode! >= 200 && response.statusCode! < 300) {
          try {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ JSON
            if (response.data is String) {
              final jsonData = jsonDecode(response.data.toString());
              print('üì¶ Directly parsed JSON: $jsonData');
              final orderId = jsonData['order_id'];
              print('‚úÖ Order created successfully. Order ID: $orderId');
              state = AsyncValue.data(orderId);
              return;
            } else {
              // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ —É–∂–µ –æ–±—ä–µ–∫—Ç JSON
              final orderId = response.data['order_id'];
              print('‚úÖ Order created successfully. Order ID: $orderId');
              state = AsyncValue.data(orderId);
              return;
            }
          } catch (e) {
            print('‚ùå Failed to parse successful response: $e');
            throw Exception('Failed to parse successful response: $e');
          }
        } else {
          print('‚ùå Request failed with status code: ${response.statusCode}');
          throw Exception('Request failed with status ${response.statusCode}');
        }
      } catch (error) {
        print('‚ùå Failed to create order with direct approach: $error');
        rethrow;
      }
    } catch (error, stackTrace) {
      print('‚ùå Failed to create order: $error');
      print('‚ùå Stack trace: $stackTrace');
      if (error is DioException) {
        print('‚ùå Response data: ${error.response?.data}');
        print('‚ùå Response headers: ${error.response?.headers}');
        print('‚ùå Request data: ${error.requestOptions.data}');
      }
      state = AsyncValue.error(error, stackTrace);
    }
  }
}
