import 'dart:async';
import 'dart:ui' as ui;
import 'package:bloc/bloc.dart';
import 'package:camera/camera.dart';
import 'package:flutter/foundation.dart';
import 'package:remalux_ar/blocs/ar_wall_painter/ar_wall_painter_event.dart';
import 'package:remalux_ar/blocs/ar_wall_painter/ar_wall_painter_state.dart';
import 'package:remalux_ar/core/services/segmentation_service_simple.dart';

class ARWallPainterBloc extends Bloc<ARWallPainterEvent, ARWallPainterState> {
  final SegmentationServiceSimple _segmentationService =
      SegmentationServiceSimple.instance;

  ARWallPainterBloc() : super(ARWallPainterState.initial) {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    on<InitializeARWallPainter>(_onInitialize);
    on<ProcessCameraFrame>(_onProcessCameraFrame);
    on<ChangeSelectedColor>(_onChangeSelectedColor);
    on<PaintWallAtPoint>(_onPaintWallAtPoint);
    on<ClearPaintedWall>(_onClearPaintedWall);
    on<ToggleUIVisibility>(_onToggleUIVisibility);
    on<ToggleSegmentationOverlay>(_onToggleSegmentationOverlay);
    on<DisposeARWallPainter>(_onDispose);
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã –∏ AI –º–æ–¥–µ–ª–∏
  Future<void> _onInitialize(
    InitializeARWallPainter event,
    Emitter<ARWallPainterState> emit,
  ) async {
    emit(state.initializing);

    try {
      print('üöÄ ARWallPainterBloc: –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');

      // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã
      final cameras = await availableCameras();
      if (cameras.isEmpty) {
        emit(state.withError('–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'));
        return;
      }

      final cameraController = CameraController(
        cameras.first,
        ResolutionPreset.high,
        enableAudio: false,
        imageFormatGroup: ImageFormatGroup.bgra8888,
      );

      await cameraController.initialize();
      emit(state.copyWith(
        cameraController: cameraController,
        isCameraInitialized: true,
      ));

      print('‚úÖ –ö–∞–º–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

      // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–∏ (–±–µ–∑ –∫–æ–ª–±—ç–∫–∞)
      await _segmentationService.initialize();

      // –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –±–µ–∑ –æ—à–∏–±–æ–∫
      emit(state.copyWith(
        isAIModelLoaded: true,
      ));
      print('‚úÖ AI –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞');

      // 3. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      if (state.isCameraInitialized && state.isAIModelLoaded) {
        emit(state.ready);
        print('üéâ ARWallPainterBloc –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
      }
    } catch (e) {
      emit(state.withError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e'));
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞ —Å –∫–∞–º–µ—Ä—ã
  Future<void> _onProcessCameraFrame(
    ProcessCameraFrame event,
    Emitter<ARWallPainterState> emit,
  ) async {
    if (!state.isReady || state.isProcessingFrame) return;

    emit(state.copyWith(isProcessingFrame: true));

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
      final result = await _segmentationService.processCameraImage(
        event.cameraImage,
        event.screenWidth,
        event.screenHeight,
      );

      if (result != null && !emit.isDone) {
        emit(state.copyWith(
          segmentationResult: result,
          aiConfidence: 0.85, // Placeholder
        ));
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–∞: $e');
    } finally {
      if (!emit.isDone) {
        emit(state.copyWith(isProcessingFrame: false));
      }
    }
  }

  /// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
  void _onChangeSelectedColor(
    ChangeSelectedColor event,
    Emitter<ARWallPainterState> emit,
  ) {
    emit(state.copyWith(selectedColor: event.color));
  }

  /// –ó–∞–∫—Ä–∞—Å–∏—Ç—å —Å—Ç–µ–Ω—É –ø–æ —Ç–æ—á–∫–µ –∫–∞—Å–∞–Ω–∏—è
  void _onPaintWallAtPoint(
    PaintWallAtPoint event,
    Emitter<ARWallPainterState> emit,
  ) {
    final paintedPath = _segmentationService.getPaintedWallPath(
      event.position,
      event.screenWidth,
      event.screenHeight,
    );

    if (paintedPath != null) {
      emit(state.copyWith(paintedWallPath: paintedPath));
    }
  }

  /// –û—á–∏—Å—Ç–∫–∞ –∑–∞–∫—Ä–∞—à–µ–Ω–Ω–æ–π —Å—Ç–µ–Ω—ã
  void _onClearPaintedWall(
    ClearPaintedWall event,
    Emitter<ARWallPainterState> emit,
  ) {
    emit(state.copyWith(clearPaintedWallPath: true));
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ UI
  void _onToggleUIVisibility(
    ToggleUIVisibility event,
    Emitter<ARWallPainterState> emit,
  ) {
    emit(state.copyWith(isUIVisible: !state.isUIVisible));
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
  void _onToggleSegmentationOverlay(
    ToggleSegmentationOverlay event,
    Emitter<ARWallPainterState> emit,
  ) {
    emit(state.copyWith(
        showSegmentationOverlay: !state.showSegmentationOverlay));
  }

  /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  Future<void> _onDispose(
    DisposeARWallPainter event,
    Emitter<ARWallPainterState> emit,
  ) async {
    print('üßπ ARWallPainterBloc: –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤');

    try {
      await state.cameraController?.dispose();
      _segmentationService.dispose();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: $e');
    }

    emit(ARWallPainterState.initial);
  }

  @override
  Future<void> close() async {
    add(const DisposeARWallPainter());
    return super.close();
  }
}
