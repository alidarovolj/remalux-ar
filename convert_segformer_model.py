#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ SegFormer –º–æ–¥–µ–ª–∏ leftattention/segformer-b4-wall
–∏–∑ ONNX —Ñ–æ—Ä–º–∞—Ç–∞ –≤ TensorFlow Lite –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

–ú–æ–¥–µ–ª—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–±—É—á–µ–Ω–∞ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å—Ç–µ–Ω –∏ –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
- 4 –∫–ª–∞—Å—Å–∞: [background, wall, floor, ceiling] (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ)
- Mean IoU: 0.8993
- Overall Accuracy: 0.9558
- –†–∞–∑–º–µ—Ä: ~3.72M –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (14.9MB)
"""

import onnx
import tensorflow as tf
import numpy as np
from onnx_tf.backend import prepare
import os

def convert_segformer_onnx_to_tflite():
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SegFormer ONNX –º–æ–¥–µ–ª—å –≤ TensorFlow Lite —Ñ–æ—Ä–º–∞—Ç
    """
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    onnx_model_path = "assets/ml/segformer-model-new.onnx"
    tflite_output_path = "assets/ml/segformer_b4_wall.tflite"
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é SegFormer –º–æ–¥–µ–ª–∏...")
    print(f"üìÇ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {onnx_model_path}")
    print(f"üìÇ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {tflite_output_path}")
    
    try:
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º ONNX –º–æ–¥–µ–ª—å
        print("\nüì• –ó–∞–≥—Ä—É–∂–∞–µ–º ONNX –º–æ–¥–µ–ª—å...")
        onnx_model = onnx.load(onnx_model_path)
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º ONNX –º–æ–¥–µ–ª—å...")
        onnx.checker.check_model(onnx_model)
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥–Ω—ã—Ö/–≤—ã—Ö–æ–¥–Ω—ã—Ö —Ç–µ–Ω–∑–æ—Ä–∞—Ö
        print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
        for input_tensor in onnx_model.graph.input:
            print(f"  –í—Ö–æ–¥: {input_tensor.name}")
            dims = [dim.dim_value for dim in input_tensor.type.tensor_type.shape.dim]
            print(f"    –§–æ—Ä–º–∞: {dims}")
            
        for output_tensor in onnx_model.graph.output:
            print(f"  –í—ã—Ö–æ–¥: {output_tensor.name}")
            dims = [dim.dim_value for dim in output_tensor.type.tensor_type.shape.dim]
            print(f"    –§–æ—Ä–º–∞: {dims}")
        
        # 4. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ONNX –≤ TensorFlow
        print("\nüîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ONNX –≤ TensorFlow...")
        tf_rep = prepare(onnx_model)
        
        # 5. –ü–æ–ª—É—á–∞–µ–º TensorFlow –º–æ–¥–µ–ª—å
        print("üì¶ –°–æ–∑–¥–∞–µ–º TensorFlow –º–æ–¥–µ–ª—å...")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        @tf.function
        def model_func(pixel_values):
            return tf_rep.run(pixel_values)
        
        # 6. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–ª—è SegFormer –æ–±—ã—á–Ω–æ 512x512)
        input_spec = tf.TensorSpec(shape=[1, 3, 512, 512], dtype=tf.float32)
        
        # 7. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        concrete_func = model_func.get_concrete_function(input_spec)
        
        # 8. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ TensorFlow Lite
        print("üéØ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ TensorFlow Lite...")
        converter = tf.lite.TFLiteConverter.from_concrete_functions([concrete_func])
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        converter.optimizations = [tf.lite.Optimize.DEFAULT]
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        converter.representative_dataset = generate_representative_dataset
        converter.target_spec.supported_ops = [
            tf.lite.OpsSet.TFLITE_BUILTINS,
            tf.lite.OpsSet.SELECT_TF_OPS  # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–ª–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π SegFormer
        ]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TFLite –º–æ–¥–µ–ª—å
        tflite_model = converter.convert()
        
        # 9. –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ {tflite_output_path}...")
        with open(tflite_output_path, 'wb') as f:
            f.write(tflite_model)
        
        # 10. –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        original_size = os.path.getsize(onnx_model_path) / (1024 * 1024)  # MB
        tflite_size = os.path.getsize(tflite_output_path) / (1024 * 1024)  # MB
        
        print(f"\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìè –†–∞–∑–º–µ—Ä ONNX –º–æ–¥–µ–ª–∏: {original_size:.2f} MB")
        print(f"üìè –†–∞–∑–º–µ—Ä TFLite –º–æ–¥–µ–ª–∏: {tflite_size:.2f} MB")
        print(f"üìâ –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞: {((original_size - tflite_size) / original_size * 100):.1f}%")
        
        # 11. –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å...")
        test_tflite_model(tflite_output_path)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}")
        return False

def generate_representative_dataset():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
    """
    print("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç...")
    for _ in range(100):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ 512x512
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–µ–Ω
        yield [np.random.random((1, 3, 512, 512)).astype(np.float32)]

def test_tflite_model(tflite_path):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é TFLite –º–æ–¥–µ–ª—å
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
        interpreter = tf.lite.Interpreter(model_path=tflite_path)
        interpreter.allocate_tensors()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞
        input_details = interpreter.get_input_details()
        output_details = interpreter.get_output_details()
        
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –í—Ö–æ–¥–Ω—ã—Ö —Ç–µ–Ω–∑–æ—Ä–æ–≤: {len(input_details)}")
        print(f"üìä –í—ã—Ö–æ–¥–Ω—ã—Ö —Ç–µ–Ω–∑–æ—Ä–æ–≤: {len(output_details)}")
        
        for i, detail in enumerate(input_details):
            print(f"  –í—Ö–æ–¥ {i}: —Ñ–æ—Ä–º–∞ {detail['shape']}, —Ç–∏–ø {detail['dtype']}")
            
        for i, detail in enumerate(output_details):
            print(f"  –í—ã—Ö–æ–¥ {i}: —Ñ–æ—Ä–º–∞ {detail['shape']}, —Ç–∏–ø {detail['dtype']}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å
        test_input = np.random.random(input_details[0]['shape']).astype(input_details[0]['dtype'])
        interpreter.set_tensor(input_details[0]['index'], test_input)
        interpreter.invoke()
        output = interpreter.get_tensor(output_details[0]['index'])
        
        print(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìè –§–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–∞: {output.shape}")
        print(f"üìä –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: [{output.min():.4f}, {output.max():.4f}]")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        return False

def update_flutter_config():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç Flutter –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
    """
    print("\nüîß –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Flutter...")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    model_info = {
        "name": "segformer_b4_wall.tflite",
        "source": "leftattention/segformer-b4-wall",
        "classes": 4,
        "input_size": [512, 512],
        "metrics": {
            "mean_iou": 0.8993,
            "overall_accuracy": 0.9558,
            "mean_accuracy": 0.9448
        },
        "class_mapping": {
            "0": "background", 
            "1": "wall",
            "2": "floor", 
            "3": "ceiling"
        }
    }
    
    print("üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏:")
    print(f"  –ò–º—è: {model_info['name']}")
    print(f"  –ò—Å—Ç–æ—á–Ω–∏–∫: {model_info['source']}")
    print(f"  –ö–ª–∞—Å—Å—ã: {model_info['classes']}")
    print(f"  –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞: {model_info['input_size']}")
    print(f"  Mean IoU: {model_info['metrics']['mean_iou']}")
    print(f"  Overall Accuracy: {model_info['metrics']['overall_accuracy']}")
    
    return model_info

if __name__ == "__main__":
    print("=" * 60)
    print("üéØ SegFormer ONNX ‚Üí TensorFlow Lite –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not os.path.exists("assets/ml/segformer-model-new.onnx"):
        print("‚ùå –§–∞–π–ª segformer-model-new.onnx –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ assets/ml/")
        exit(1)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
    success = convert_segformer_onnx_to_tflite()
    
    if success:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Flutter
        model_info = update_flutter_config()
        
        print("\n" + "=" * 60)
        print("üéâ –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –û–±–Ω–æ–≤–∏—Ç—å SegmentationService –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏")
        print("2. –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω–¥–µ–∫—Å –∫–ª–∞—Å—Å–∞ 'wall' —Å 2 –Ω–∞ 1")
        print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ")
        print("4. –°—Ä–∞–≤–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º–æ–¥–µ–ª—å—é")
        
    else:
        print("\n‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        exit(1) 