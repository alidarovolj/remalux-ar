#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è SegFormer ONNX –º–æ–¥–µ–ª–∏ –∏ –ø—Ä—è–º–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ TFLite
"""

import onnx
import numpy as np
import tensorflow as tf
from onnx import numpy_helper
import os

def inspect_onnx_model():
    """
    –ò—Å—Å–ª–µ–¥—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É ONNX –º–æ–¥–µ–ª–∏
    """
    model_path = "assets/ml/segformer-model-new.onnx"
    
    print("üîç –ò—Å—Å–ª–µ–¥—É–µ–º ONNX –º–æ–¥–µ–ª—å SegFormer...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        model = onnx.load(model_path)
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"\nüìä –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        print(f"  IR –≤–µ—Ä—Å–∏—è: {model.ir_version}")
        print(f"  Producer: {model.producer_name} {model.producer_version}")
        print(f"  Domain: {model.domain}")
        
        # –í—Ö–æ–¥—ã –º–æ–¥–µ–ª–∏
        print(f"\nüì• –í—Ö–æ–¥–Ω—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã:")
        for input_tensor in model.graph.input:
            print(f"  –ò–º—è: {input_tensor.name}")
            shape = []
            for dim in input_tensor.type.tensor_type.shape.dim:
                if dim.dim_value:
                    shape.append(dim.dim_value)
                elif dim.dim_param:
                    shape.append(f"'{dim.dim_param}'")
                else:
                    shape.append("?")
            print(f"  –§–æ—Ä–º–∞: {shape}")
            print(f"  –¢–∏–ø: {input_tensor.type.tensor_type.elem_type}")
        
        # –í—ã—Ö–æ–¥—ã –º–æ–¥–µ–ª–∏
        print(f"\nüì§ –í—ã—Ö–æ–¥–Ω—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã:")
        for output_tensor in model.graph.output:
            print(f"  –ò–º—è: {output_tensor.name}")
            shape = []
            for dim in output_tensor.type.tensor_type.shape.dim:
                if dim.dim_value:
                    shape.append(dim.dim_value)
                elif dim.dim_param:
                    shape.append(f"'{dim.dim_param}'")
                else:
                    shape.append("?")
            print(f"  –§–æ—Ä–º–∞: {shape}")
            print(f"  –¢–∏–ø: {output_tensor.type.tensor_type.elem_type}")
        
        # –£–∑–ª—ã –º–æ–¥–µ–ª–∏
        print(f"\nüß† –£–∑–ª—ã –º–æ–¥–µ–ª–∏: {len(model.graph.node)}")
        op_types = {}
        for node in model.graph.node:
            op_type = node.op_type
            if op_type in op_types:
                op_types[op_type] += 1
            else:
                op_types[op_type] = 1
        
        print(f"  –¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π:")
        for op_type, count in sorted(op_types.items()):
            print(f"    {op_type}: {count}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã (–≤–µ—Å–∞)
        print(f"\n‚öñÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏: {len(model.graph.initializer)}")
        total_params = 0
        for init in model.graph.initializer:
            tensor = numpy_helper.to_array(init)
            params = np.prod(tensor.shape)
            total_params += params
            print(f"  {init.name}: {tensor.shape} ({params:,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)")
        
        print(f"\nüìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_params:,}")
        
        return model
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None

def try_alternative_conversion():
    """
    –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    """
    print("\nüîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏...")
    
    model_path = "assets/ml/segformer-model-new.onnx"
    
    # –°–ø–æ—Å–æ–± 1: –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ tf2onnx (–æ–±—Ä–∞—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è)
    try:
        print("\nüîÑ –°–ø–æ—Å–æ–± 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º onnxruntime –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º onnxruntime –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        try:
            import onnxruntime as ort
        except ImportError:
            print("‚ö†Ô∏è onnxruntime –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
            os.system("python3 -m pip install onnxruntime")
            import onnxruntime as ort
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é ONNX Runtime
        session = ort.InferenceSession(model_path)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥–∞—Ö/–≤—ã—Ö–æ–¥–∞—Ö
        input_info = session.get_inputs()[0]
        output_info = session.get_outputs()[0]
        
        print(f"‚úÖ ONNX Runtime –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
        print(f"  –í—Ö–æ–¥: {input_info.name}, —Ñ–æ—Ä–º–∞: {input_info.shape}, —Ç–∏–ø: {input_info.type}")
        print(f"  –í—ã—Ö–æ–¥: {output_info.name}, —Ñ–æ—Ä–º–∞: {output_info.shape}, —Ç–∏–ø: {output_info.type}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
        input_shape = input_info.shape
        if input_shape[0] == 'batch_size' or input_shape[0] is None:
            input_shape = [1] + list(input_shape[1:])
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å
        test_input = np.random.randn(*input_shape).astype(np.float32)
        output = session.run([output_info.name], {input_info.name: test_input})
        
        print(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å:")
        print(f"  –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞: {test_input.shape}")
        print(f"  –§–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–∞: {output[0].shape}")
        print(f"  –î–∏–∞–ø–∞–∑–æ–Ω –≤—ã—Ö–æ–¥–∞: [{output[0].min():.4f}, {output[0].max():.4f}]")
        
        return True, input_shape, output[0].shape
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–ø–æ—Å–æ–±–µ 1: {e}")
    
    return False, None, None

def create_wrapper_tflite_model(input_shape, output_shape):
    """
    –°–æ–∑–¥–∞–µ—Ç wrapper TFLite –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ONNX —á–µ—Ä–µ–∑ onnxruntime
    """
    print(f"\nüéØ –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ONNX –º–æ–¥–µ–ª–∏...")
    
    # –ü–æ—Å–∫–æ–ª—å–∫—É –ø—Ä—è–º–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–æ–∑–¥–∞–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    # –æ —Ç–æ–º, –∫–∞–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å ONNX –º–æ–¥–µ–ª—å –≤–æ Flutter
    
    model_info = {
        "name": "segformer-model-new.onnx",
        "type": "ONNX",
        "source": "leftattention/segformer-b4-wall",
        "input_shape": input_shape,
        "output_shape": output_shape,
        "classes": 4,
        "class_mapping": {
            0: "background",
            1: "wall", 
            2: "floor",
            3: "ceiling"
        },
        "metrics": {
            "mean_iou": 0.8993,
            "overall_accuracy": 0.9558
        },
        "usage_note": "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Flutter –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è onnxruntime_flutter –ø–ª–∞–≥–∏–Ω"
    }
    
    print(f"üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
    for key, value in model_info.items():
        print(f"  {key}: {value}")
    
    return model_info

def suggest_flutter_integration():
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ONNX –º–æ–¥–µ–ª–∏ –≤–æ Flutter
    """
    print(f"\nüí° –í–∞—Ä–∏–∞–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤–æ Flutter:")
    
    print(f"\n1. üì± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ onnxruntime_flutter:")
    print(f"   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –≤ pubspec.yaml: onnxruntime: ^1.14.1")
    print(f"   ‚Ä¢ –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ONNX –º–æ–¥–µ–ª–∏ –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
    print(f"   ‚Ä¢ –õ—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
    
    print(f"\n2. üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–π TFLite –º–æ–¥–µ–ª–∏:")
    print(f"   ‚Ä¢ –í assets/ml/ —É–∂–µ –µ—Å—Ç—å segformer.tflite (197KB)")
    print(f"   ‚Ä¢ –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä, –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –Ω–∞—à–∏–º–∏ –∫–ª–∞—Å—Å–∞–º–∏")
    
    print(f"\n3. ‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:")
    print(f"   ‚Ä¢ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å SegFormer –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    print(f"   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API")
    print(f"   ‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
    
    print(f"\n4. üéØ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å:")
    print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å (DeepLab v3+)")
    print(f"   ‚Ä¢ –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –∏ –ø—Ä–æ—â–µ –≤ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
    print(f"   ‚Ä¢ assets/ml/deeplabv3_mnv2_ade20k_1.tflite —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

if __name__ == "__main__":
    print("=" * 60)
    print("üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ SegFormer ONNX –º–æ–¥–µ–ª–∏")
    print("=" * 60)
    
    # –ò—Å—Å–ª–µ–¥—É–µ–º –º–æ–¥–µ–ª—å
    model = inspect_onnx_model()
    
    if model:
        # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
        success, input_shape, output_shape = try_alternative_conversion()
        
        if success:
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            model_info = create_wrapper_tflite_model(input_shape, output_shape)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        suggest_flutter_integration()
    
    print(f"\n" + "=" * 60)
    print(f"üèÅ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    print("=" * 60) 